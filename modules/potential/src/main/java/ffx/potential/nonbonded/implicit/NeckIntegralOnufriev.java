package ffx.potential.nonbonded.implicit;

import java.util.ArrayList;
import java.util.Arrays;

public class NeckIntegralOnufriev {
    // Inputs: radius of atom i (rho i) and radius of atom j (rho j)
    // Outputs: Aij and Bij (interpolated/extrapolated where necessary)

    //private static final ArrayList<Double> rhoiRows = new ArrayList<>(Arrays.asList(1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8));
    //private static final ArrayList<Double> rhojColumns = new ArrayList<>(Arrays.asList(1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8));

    private static final ArrayList<Double> rhoiRows = new ArrayList<>(Arrays.asList(0.8,0.85,0.9,0.95,1.00,1.05,1.1,1.15,1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8,1.85,1.9,1.95,2.0,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5));
    private static final ArrayList<Double> rhojColumns = new ArrayList<>(Arrays.asList(0.8,0.85,0.9,0.95,1.00,1.05,1.1,1.15,1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8,1.85,1.9,1.95,2.0,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5));

    private static final ArrayList<Double> benchmarkedRadii = new ArrayList<>(Arrays.asList(0.8,0.85,0.9,0.95,1.00,1.05,1.1,1.15,1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8,1.85,1.9,1.95,2.0,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5));
    private static final ArrayList<Double> emptyi = new ArrayList<>(Arrays.asList(1.85,1.9,1.95,2.0,2.05,2.1,2.15,2.2,2.25,2.3,2.35));

    // Aij AO: 0.0000947808
    private static final double[][] AijOrig = {
            {0.0000435585,0.0001137020,0.0001001180,0.0001195900,0.0001050630,0.0000922010,0.0001099390,0.0000961817,0.0001143420,0.0000999772,0.0001184650,0.0001035490,0.0001227270},
            {0.0000789821,0.0000948444,0.0000836245,0.0000733297,0.0000878314,0.0000769799,0.0000919335,0.0000804789,0.0000958057,0.0000839558,0.0000997966,0.0000870743,0.0001031750},
            {0.0000665366,0.0000799715,0.0000703720,0.0000842561,0.0000740921,0.0000649757,0.0000775663,0.0000681323,0.0000811720,0.0000708781,0.0000842888,0.0000735226,0.0000872208},
            {0.0000560640,0.0000673256,0.0000593409,0.0000523516,0.0000625504,0.0000549136,0.0000656357,0.0000782465,0.0000685443,0.0000599304,0.0000712967,0.0000622049,0.0000738641},
            {0.0000476864,0.0000573346,0.0000505739,0.0000606430,0.0000534346,0.0000638940,0.0000560721,0.0000668434,0.0000585494,0.0000511473,0.0000608988,0.0000531489,0.0000632062},
            {0.0000406501,0.0000489724,0.0000432430,0.0000519647,0.0000456150,0.0000545524,0.0000478982,0.0000571349,0.0000500254,0.0000437652,0.0000521263,0.0000455330,0.0000540793},
            {0.0000349541,0.0000421574,0.0000370920,0.0000445857,0.0000391597,0.0000469342,0.0000411581,0.0000491397,0.0000430438,0.0000512731,0.0000448652,0.0000392138,0.0000466779},
            {0.0000411296,0.0000362900,0.0000319527,0.0000384631,0.0000337429,0.0000404799,0.0000355183,0.0000424310,0.0000371662,0.0000443414,0.0000388286,0.0000461746,0.0000403668},
            {0.0000355236,0.0000313722,0.0000276089,0.0000332680,0.0000292288,0.0000350426,0.0000307676,0.0000367966,0.0000323063,0.0000385546,0.0000337092,0.0000400815,0.0000350018},
            {0.0000309168,0.0000272940,0.0000240680,0.0000289772,0.0000254577,0.0000305399,0.0000268793,0.0000321616,0.0000281553,0.0000336062,0.0000294027,0.0000349824,0.0000305618},
            {0.0000269536,0.0000237946,0.0000287199,0.0000252553,0.0000222642,0.0000266807,0.0000234688,0.0000280674,0.0000245787,0.0000293847,0.0000256658,0.0000305777,0.0000267274},
            {0.0000236280,0.0000208424,0.0000251832,0.0000221566,0.0000195124,0.0000234327,0.0000205702,0.0000246477,0.0000215557,0.0000257936,0.0000225548,0.0000268717,0.0000234796},
            {0.0000207603,0.0000182939,0.0000161523,0.0000195050,0.0000234519,0.0000206073,0.0000180540,0.0000216798,0.0000189606,0.0000226817,0.0000198338,0.0000236529,0.0000206561}
    };

    // Bij AO: 0.00
    private static final double[][] BijOrig = {
            {-0.06,0.15,0.10,0.25,0.20,0.15,0.30,0.25,0.40,0.35,0.50,0.45,0.60},
            {0.05,0.20,0.15,0.10,0.25,0.20,0.35,0.30,0.45,0.40,0.55,0.50,0.65},
            {0.10,0.25,0.20,0.35,0.30,0.25,0.40,0.35,0.50,0.45,0.60,0.55,0.70},
            {0.15,0.30,0.25,0.20,0.35,0.30,0.45,0.60,0.55,0.50,0.65,0.60,0.75},
            {0.20,0.35,0.30,0.45,0.40,0.55,0.50,0.65,0.60,0.55,0.70,0.65,0.80},
            {0.25,0.40,0.35,0.50,0.45,0.60,0.55,0.70,0.65,0.60,0.75,0.70,0.85},
            {0.30,0.45,0.40,0.55,0.50,0.65,0.60,0.75,0.70,0.85,0.80,0.75,0.90},
            {0.55,0.50,0.45,0.60,0.55,0.70,0.65,0.80,0.75,0.90,0.85,1.00,0.95},
            {0.60,0.55,0.50,0.65,0.60,0.75,0.70,0.85,0.80,0.95,0.90,1.05,1.00},
            {0.65,0.60,0.55,0.70,0.65,0.80,0.75,0.90,0.85,1.00,0.95,1.10,1.05},
            {0.70,0.65,0.80,0.75,0.70,0.85,0.80,0.95,0.90,1.05,1.00,1.15,1.10},
            {0.75,0.70,0.85,0.80,0.75,0.90,0.85,1.00,0.95,1.10,1.05,1.20,1.15},
            {0.80,0.75,0.70,0.85,1.00,0.95,0.90,1.05,1.00,1.15,1.10,1.25,1.20}
    };

    // Aij Updated 08 Feb 21
    // 35x35 array of constants - 999 denotes missing values
    private static final double[][] AijAguilarOnufriev = {
            {0.0000083300,0.0000073300,0.0000069000,0.0000111000,0.0000085500,0.0000116000,0.0000071300,0.0000083200,0.0000101000,0.0000103000,0.0000093700,0.0000097300,0.0000099700,0.0000089600,0.0000104000,0.0000095000,0.0000125000,0.0000131000,0.0000148000,0.0000104000,0.0000133000,0.0000120000,0.0000159000,0.0000143000,0.0000125000,0.0000112000,0.0000113000,0.0000116000,0.0000177000,0.0000176000,0.0000209000,0.0000122000,0.0000140000,0.0000161000,0.0000190000},
            {0.0000056600,0.0000064000,0.0000087600,0.0000054700,0.0000073800,0.0000068900,0.0000102000,0.0000080300,0.0000072900,0.0000101000,0.0000091500,0.0000108000,0.0000084100,0.0000132000,0.0000108000,0.0000089700,0.0000109000,0.0000110000,0.0000114000,0.0000101000,0.0000103000,0.0000116000,0.0000163000,0.0000121000,0.0000189000,0.0000112000,0.0000170000,0.0000116000,0.0000100000,0.0000153000,0.0000135000,0.0000138000,0.0000163000,0.0000130000,0.0000187000},
            {0.0000068700,0.0000076900,0.0000075700,0.0000078600,0.0000042600,0.0000086100,0.0000080400,0.0000081800,0.0000086300,0.0000088100,0.0000118000,0.0000082900,0.0000094700,0.0000099500,0.0000114000,0.0000105000,0.0000062600,0.0000082900,0.0000114000,0.0000101000,0.0000101000,0.0000120000,0.0000093000,0.0000143000,0.0000094900,0.0000126000,0.0000099100,0.0000099100,0.0000090800,0.0000104000,0.0000118000,0.0000120000,0.0000107000,0.0000139000,0.0000162000},
            {0.0000082400,0.0000054100,0.0000078300,0.0000078300,0.0000060800,0.0000081900,0.0000066700,0.0000076900,0.0000074100,0.0000064300,0.0000104000,0.0000103000,0.0000070300,0.0000072700,0.0000099200,0.0000099200,0.0000103000,0.0000090500,0.0000094600,0.0000095500,0.0000125000,0.0000100000,0.0000100000,0.0000119000,0.0000105000,0.0000108000,0.0000124000,0.0000128000,0.0000128000,0.0000117000,0.0000103000,0.0000137000,0.0000104000,0.0000138000,0.0000122000},
            {0.0000096600,0.0000075400,0.0000093500,0.0000061300,0.0000067700,0.0000082600,0.0000074200,0.0000066700,0.0000089000,0.0000063200,0.0000073500,0.0000059900,0.0000079500,0.0000082900,0.0000084600,0.0000087200,0.0000102000,0.0000086700,0.0000109000,0.0000109000,0.0000085000,0.0000147000,0.0000099300,0.0000101000,0.0000122000,0.0000104000,0.0000122000,0.0000083700,0.0000130000,0.0000108000,0.0000113000,0.0000172000,0.0000078100,0.0000116000,0.0000103000},
            {0.0000104000,0.0000066900,0.0000078200,0.0000082100,0.0000082900,0.0000069800,0.0000061700,0.0000055800,0.0000102000,0.0000106000,0.0000095200,0.0000084700,0.0000085800,0.0000078200,0.0000092400,0.0000065000,0.0000074000,0.0000070100,0.0000079300,0.0000095800,0.0000082700,0.0000111000,0.0000086200,0.0000117000,0.0000087800,0.0000104000,0.0000082500,0.0000121000,0.0000093600,0.0000111000,0.0000112000,0.0000114000,0.0000115000,0.0000091000,0.0000119000},
            {0.0000111000,0.0000069700,0.0000059500,0.0000057500,0.0000086900,0.0000083100,0.0000071200,0.0000064200,0.0000066100,0.0000089100,0.0000083400,0.0000073700,0.0000089400,0.0000102000,0.0000081400,0.0000062200,0.0000076100,0.0000087400,0.0000104000,0.0000120000,0.0000121000,0.0000085300,0.0000111000,0.0000076600,0.0000115000,0.0000090900,0.0000103000,0.0000107000,0.0000081300,0.0000098600,0.0000098700,0.0000129000,0.0000100000,0.0000134000,0.0000091100},
            {0.0000096800,0.0000095900,0.0000054300,0.0000079000,0.0000075900,0.0000076700,0.0000095000,0.0000098900,0.0000051200,0.0000052900,0.0000078600,0.0000064200,0.0000075400,0.0000103000,0.0000079100,0.0000062700,0.0000084000,0.0000086900,0.0000089000,0.0000090700,0.0000093700,0.0000082500,0.0000098400,0.0000059000,0.0000078200,0.0000114000,0.0000060800,0.0000091000,0.0000083400,0.0000073500,0.0000146000,0.0000074900,0.0000076300,0.0000117000,0.0000102000},
            {0.0000075900,0.0000084800,0.0000073100,0.0000093500,0.0000069000,0.0000067300,0.0000077100,0.0000088200,0.0000066000,0.0000058800,0.0000068100,0.0000093600,0.0000063400,0.0000057100,0.0000101000,0.0000092400,0.0000090800,0.0000084400,0.0000096400,0.0000068600,0.0000099500,0.0000092800,0.0000091900,0.0000074100,0.0000111000,0.0000101000,0.0000078300,0.0000078700,0.0000092800,0.0000081700,0.0000094000,0.0000074600,0.0000099800,0.0000129000,0.0000051900},
            {0.0000107000,0.0000068200,0.0000085400,0.0000086200,0.0000098900,0.0000092300,0.0000061200,0.0000067100,0.0000079100,0.0000058800,0.0000068100,0.0000059800,0.0000073000,0.0000085200,0.0000076200,0.0000100000,0.0000063100,0.0000072100,0.0000097200,0.0000096200,0.0000068100,0.0000089300,0.0000092100,0.0000109000,0.0000082400,0.0000074800,0.0000097000,0.0000059600,0.0000116000,0.0000080600,0.0000070200,0.0000110000,0.0000082600,0.0000098500,0.0000096600},
            {0.0000100000,0.0000080300,0.0000119000,0.0000115000,0.0000076000,0.0000075200,0.0000061900,0.0000091700,0.0000059900,0.0000069500,0.0000049900,0.0000053400,0.0000080800,0.0000097600,0.0000085500,0.0000051500,0.0000079100,0.0000081000,0.0000073000,0.0000097400,0.0000076000,0.0000076200,0.0000104000,0.0000105000,0.0000071600,0.0000094900,0.0000097000,0.0000085300,0.0000077200,0.0000090000,0.0000104000,0.0000070800,0.0000109000,0.0000065100,0.0000110000},
            {0.0000074900,0.0000097500,0.0000108000,0.0000103000,0.0000077900,0.0000058700,0.0000075900,0.0000092300,0.0000095600,0.0000078700,0.0000052900,0.0000058000,0.0000060200,0.0000082000,0.0000073200,0.0000085200,0.0000059300,0.0000060800,0.0000062100,0.0000084200,0.0000084900,0.0000088100,0.0000086800,0.0000090800,0.0000091000,0.0000082300,0.0000095400,0.0000098700,0.0000075700,0.0000117000,0.0000068400,0.0000090900,0.0000080600,0.0000107000,0.0000095200},
            {0.0000131000,0.0000084100,0.0000097900,0.0000106000,0.0000090200,0.0000067800,0.0000065700,0.0000074800,0.0000087800,0.0000063600,0.0000079700,0.0000051400,0.0000059800,0.0000062300,0.0000081800,0.0000056800,0.0000088400,0.0000068600,0.0000093600,0.0000082600,0.0000057600,0.0000083900,0.0000060900,0.0000080500,0.0000069500,0.0000092300,0.0000082300,0.0000073100,0.0000086000,0.0000067000,0.0000101000,0.0000079500,0.0000079600,0.0000094000,0.0000070900},
            {0.0000080400,0.0000114000,0.0000097700,0.0000083200,0.0000072000,0.0000063100,0.0000070100,0.0000067500,0.0000085800,0.0000087600,0.0000073200,0.0000070600,0.0000060900,0.0000079300,0.0000095000,0.0000065700,0.0000075200,0.0000077300,0.0000077600,0.0000043000,0.0000109000,0.0000066000,0.0000114000,0.0000088100,0.0000054000,0.0000063700,0.0000063400,0.0000083100,0.0000074500,0.0000058100,0.0000060400,0.0000088400,0.0000080200,0.0000070300,0.0000094400},
            {0.0000124000,0.0000080900,0.0000088200,0.0000114000,0.0000083900,0.0000094900,0.0000092400,0.0000078800,0.0000089400,0.0000112000,0.0000064500,0.0000098200,0.0000073100,0.0000070800,0.0000080700,0.0000071800,0.0000049200,0.0000065200,0.0000067900,0.0000079800,0.0000069600,0.0000082400,0.0000049500,0.0000076100,0.0000059600,0.0000060300,0.0000078800,0.0000081700,0.0000055800,0.0000058800,0.0000074600,0.0000077000,0.0000068400,0.0000070200,0.0000061600},
            {0.0000106000,0.0000090400,0.0000118000,0.0000114000,0.0000099400,0.0000100000,0.0000063700,0.0000064800,0.0000105000,0.0000089400,0.0000077500,0.0000050800,0.0000064700,0.0000050000,0.0000054500,0.0000063200,0.0000072700,0.0000072900,0.0000075700,0.0000076300,0.0000052800,0.0000070500,0.0000074300,0.0000074900,0.0000087600,0.0000051900,0.0000060800,0.0000069700,0.0000071700,0.0000064200,0.0000084500,0.0000085900,0.0000087000,0.0000069100,0.0000116000},
            {0.0000093200,0.0000092500,0.0000070400,0.0000080900,0.0000090200,0.0000100000,0.0000076500,0.0000074200,0.0000122000,0.0000080600,0.0000091100,0.0000077400,0.0000045100,0.0000057000,0.0000056000,0.0000055700,0.0000061700,0.0000072700,0.0000038200,0.0000059100,0.0000087300,0.0000061700,0.0000054500,0.0000055100,0.0000073800,0.0000066900,0.0000059500,0.0000070100,0.0000092000,0.0000092500,0.0000063800,0.0000072800,0.0000066700,0.0000074800,0.0000068500},
            {0.0000096400,0.0000126000,0.0000082900,0.0000104000,0.0000078100,0.0000089600,0.0000101000,0.0000066700,0.0000056300,0.0000074200,0.0000082700,0.0000069000,0.0000080200,0.0000066700,0.0000057200,0.0000074400,0.0000063700,0.0000071200,0.0000057200,0.0000074900,0.0000077300,0.0000068800,0.0000061500,0.0000072800,0.0000072500,0.0000074900,0.0000075800,0.0000060400,0.0000076700,0.0000081000,0.0000081300,0.0000065800,0.0000057200,0.0000077100,0.0000066100},
            {0.0000109000,0.0000127000,0.0000112000,0.0000126000,0.0000091400,0.0000070000,0.0000077200,0.0000089600,0.0000096200,0.0000084000,0.0000072800,0.0000070600,0.0000071500,0.0000061700,0.0000089900,0.0000075600,0.0000065000,0.0000057400,0.0000082700,0.0000038100,0.0000050800,0.0000059600,0.0000069300,0.0000080200,0.0000096100,0.0000064300,0.0000099000,0.0000076600,0.0000079400,0.0000079500,0.0000072200,0.0000055900,0.0000096200,0.0000074800,0.0000086200},
            {0.0000101000,0.0000100000,0.0000115000,0.0000113000,0.0000124000,0.0000083400,0.0000105000,0.0000103000,0.0000068700,0.0000085500,0.0000073700,0.0000072800,0.0000082700,0.0000071600,0.0000047900,0.0000090500,0.0000068000,0.0000075700,0.0000043900,0.0000039300,0.0000049100,0.0000051200,0.0000076700,0.0000053000,0.0000069600,0.0000072100,0.0000043000,0.0000065500,0.0000051300,0.0000078800,0.0000054200,0.0000080000,0.0000082600,0.0000064200,0.0000074800},
            {0.0000134000,0.0000137000,0.0000102000,0.0000108000,0.0000083600,0.0000094600,0.0000081000,0.0000108000,0.0000068300,0.0000087300,0.0000099300,0.0000110000,0.0000064400,0.0000082400,0.0000054300,0.0000079500,0.0000068300,0.0000100000,0.0000086500,0.0000065100,0.0000050400,0.0000057100,0.0000059900,0.0000069500,0.0000042000,0.0000082500,0.0000056400,0.0000086300,0.0000066100,0.0000067600,0.0000046500,0.0000092100,0.0000048000,0.0000094100,0.0000056500},
            {0.0000102000,0.0000078000,0.0000116000,0.0000098100,0.0000114000,0.0000112000,0.0000084900,0.0000111000,0.0000091000,0.0000103000,0.0000058900,0.0000087900,0.0000075500,0.0000097200,0.0000063200,0.0000071100,0.0000069200,0.0000053800,0.0000058900,0.0000067600,0.0000076200,0.0000044000,0.0000065700,0.0000039800,0.0000047400,0.0000042000,0.0000064900,0.0000043000,0.0000068300,0.0000044500,0.0000068800,0.0000059700,0.0000054600,0.0000071100,0.0000043400},
            {0.0000138000,0.0000107000,0.0000104000,0.0000134000,0.0000148000,0.0000087200,0.0000086200,0.0000097800,0.0000081300,0.0000071000,0.0000091100,0.0000088800,0.0000078000,0.0000087000,0.0000058700,0.0000057000,0.0000055900,0.0000061300,0.0000053300,0.0000078000,0.0000068300,0.0000076600,0.0000039300,0.0000044600,0.0000050600,0.0000047000,0.0000053400,0.0000037700,0.0000055800,0.0000051600,0.0000045200,0.0000068000,0.0000046200,0.0000047700,0.0000042300},
            {0.0000144000,0.0000140000,0.0000107000,0.0000089800,0.0000116000,0.0000103000,0.0000105000,0.0000066500,0.0000075200,0.0000084800,0.0000092400,0.0000069500,0.0000092300,0.0000089000,0.0000113000,0.0000067600,0.0000083900,0.0000063700,0.0000063000,0.0000091200,0.0000062600,0.0000068100,0.0000045200,0.0000074700,0.0000058700,0.0000059500,0.0000041700,0.0000042800,0.0000038800,0.0000056200,0.0000057900,0.0000067500,0.0000052100,0.0000054300,0.0000069100},
            {0.0000123000,0.0000144000,0.0000108000,0.0000092000,0.0000090900,0.0000090900,0.0000116000,0.0000088400,0.0000073400,0.0000093900,0.0000083800,0.0000062000,0.0000068900,0.0000091300,0.0000067600,0.0000087800,0.0000057900,0.0000072700,0.0000098200,0.0000081300,0.0000061100,0.0000042200,0.0000067400,0.0000050800,0.0000059200,0.0000059400,0.0000060600,0.0000041600,0.0000063100,0.0000063900,0.0000096800,0.0000057500,0.0000059900,0.0000067200,0.0000048100},
            {0.0000145000,0.0000197000,0.0000126000,0.0000139000,0.0000134000,0.0000092700,0.0000104000,0.0000100000,0.0000076500,0.0000066100,0.0000074900,0.0000071000,0.0000082300,0.0000081100,0.0000069800,0.0000070300,0.0000068300,0.0000074400,0.0000065400,0.0000073900,0.0000063800,0.0000047800,0.0000041400,0.0000052400,0.0000076500,0.0000059600,0.0000060300,0.0000054300,0.0000070300,0.0000073400,0.0000043900,0.0000057600,0.0000065800,0.0000059900,0.0000053400},
            {0.0000112000,0.0000170000,0.0000098400,0.0000082700,0.0000139000,0.0000107000,0.0000104000,0.0000103000,0.0000089100,0.0000099600,0.0000097600,0.0000064300,0.0000082800,0.0000062700,0.0000105000,0.0000080900,0.0000053500,0.0000053300,0.0000066800,0.0000057000,0.0000064300,0.0000082900,0.0000054800,0.0000047600,0.0000053100,0.0000077500,0.0000058800,0.0000051700,0.0000054600,0.0000054100,0.0000055600,0.0000064100,0.0000050800,0.0000066800,0.0000059700},
            {0.0000129000,0.0000103000,0.0000098700,0.0000128000,0.0000097700,0.0000080900,0.0000120000,0.0000079400,0.0000088700,0.0000089400,0.0000101000,0.0000086800,0.0000058600,0.0000073300,0.0000073500,0.0000061800,0.0000090200,0.0000060200,0.0000059600,0.0000044500,0.0000084800,0.0000056700,0.0000063800,0.0000070800,0.0000079300,0.0000032400,0.0000060400,0.0000046000,0.0000028200,0.0000032700,0.0000048500,0.0000043400,0.0000065100,0.0000030800,0.0000059100},
            {0.0000133000,0.0000133000,0.0000133000,0.0000129000,0.0000128000,0.0000123000,0.0000096700,0.0000081200,0.0000121000,0.0000090400,0.0000078700,0.0000077900,0.0000076400,0.0000084400,0.0000083200,0.0000096700,0.0000063200,0.0000080200,0.0000061000,0.0000059400,0.0000035300,0.0000058300,0.0000057600,0.0000063900,0.0000062200,0.0000062600,0.0000032700,0.0000040500,0.0000045600,0.0000036500,0.0000041800,0.0000043000,0.0000055000,0.0000064500,0.0000050100},
            {0.0000135000,0.0000119000,0.0000090700,0.0000132000,0.0000073800,0.0000112000,0.0000086400,0.0000094300,0.0000081800,0.0000092900,0.0000080200,0.0000077100,0.0000102000,0.0000077900,0.0000059000,0.0000057300,0.0000072300,0.0000063900,0.0000079900,0.0000079200,0.0000054100,0.0000067500,0.0000057300,0.0000045300,0.0000048900,0.0000043600,0.0000048900,0.0000054100,0.0000036000,0.0000067100,0.0000051900,0.0000053800,0.0000029700,0.0000055700,0.0000073400},
            {0.0000180000,0.0000135000,0.0000104000,0.0000101000,0.0000100000,0.0000111000,0.0000087200,0.0000111000,0.0000109000,0.0000082800,0.0000091300,0.0000117000,0.0000078900,0.0000076800,0.0000058700,0.0000074100,0.0000057400,0.0000071800,0.0000050400,0.0000070800,0.0000103000,0.0000067300,0.0000036300,0.0000051200,0.0000044300,0.0000043200,0.0000064600,0.0000037900,0.0000053900,0.0000031900,0.0000068100,0.0000028600,0.0000042400,0.0000030900,0.0000073700},
            {0.0000119000,0.0000138000,0.0000138000,0.0000103000,0.0000112000,0.0000101000,0.0000145000,0.0000096600,0.0000095600,0.0000110000,0.0000071800,0.0000092800,0.0000081200,0.0000069400,0.0000101000,0.0000098000,0.0000065800,0.0000050300,0.0000064600,0.0000081600,0.0000054500,0.0000053300,0.0000068200,0.0000076400,0.0000065200,0.0000098900,0.0000039300,0.0000049300,0.0000043100,0.0000054900,0.0000046600,0.0000054700,0.0000037000,0.0000042000,0.0000037600},
            {0.0000105000,0.0000162000,0.0000121000,0.0000105000,0.0000100000,0.0000114000,0.0000077000,0.0000116000,0.0000064500,0.0000086500,0.0000073700,0.0000105000,0.0000093400,0.0000090300,0.0000077600,0.0000076500,0.0000086000,0.0000067500,0.0000057100,0.0000084000,0.0000062700,0.0000069800,0.0000060200,0.0000067200,0.0000076600,0.0000057700,0.0000057800,0.0000038900,0.0000034100,0.0000055100,0.0000054800,0.0000047000,0.0000042500,0.0000047000,0.0000054800},
            {0.0000212000,0.0000128000,0.0000108000,0.0000119000,0.0000134000,0.0000079100,0.0000103000,0.0000077800,0.0000112000,0.0000099800,0.0000127000,0.0000074900,0.0000107000,0.0000061800,0.0000079600,0.0000061400,0.0000088400,0.0000066600,0.0000098100,0.0000073800,0.0000065200,0.0000062900,0.0000042800,0.0000061800,0.0000059900,0.0000040500,0.0000051100,0.0000045300,0.0000083000,0.0000055600,0.0000063200,0.0000048200,0.0000061500,0.0000042200,0.0000036500},
            {0.0000141000,0.0000190000,0.0000122000,0.0000121000,0.0000102000,0.0000091300,0.0000134000,0.0000088100,0.0000115000,0.0000111000,0.0000084700,0.0000085600,0.0000107000,0.0000093900,0.0000092100,0.0000080200,0.0000101000,0.0000067700,0.0000110000,0.0000075300,0.0000065200,0.0000072600,0.0000092600,0.0000090400,0.0000048100,0.0000053300,0.0000052600,0.0000040400,0.0000044900,0.0000064400,0.0000043400,0.0000063500,0.0000081200,0.0000041200,0.0000042000}
    };

    // Bij Updated 08 Feb 21
    // 35x35 array of constants - 999 denotes missing values
    private static final double[][] BijAguilarOnufriev = {
            {-1.20,-1.25,-1.30,-0.95,-1.10,-0.85,-1.20,-1.05,-0.90,-0.85,-0.90,-0.85,-0.80,-0.85,-0.70,-0.75,-0.50,-0.45,-0.30,-0.55,-0.30,-0.35,-0.10,-0.15,-0.20,-0.25,-0.20,-0.15,0.20,0.25,0.40,0.05,0.20,0.35,0.50},
            {-1.45,-1.30,-1.05,-1.40,-1.15,-1.20,-0.85,-1.00,-1.05,-0.80,-0.85,-0.70,-0.85,-0.50,-0.65,-0.70,-0.55,-0.50,-0.45,-0.50,-0.45,-0.30,-0.05,-0.20,0.15,-0.20,0.15,-0.10,-0.15,0.20,0.15,0.20,0.35,0.20,0.55},
            {-1.30,-1.15,-1.10,-1.05,-1.50,-0.95,-1.00,-0.95,-0.90,-0.85,-0.60,-0.85,-0.70,-0.65,-0.50,-0.55,-0.90,-0.65,-0.40,-0.45,-0.40,-0.25,-0.40,-0.05,-0.30,-0.05,-0.20,-0.15,-0.20,-0.05,0.10,0.15,0.10,0.35,0.50},
            {-1.15,-1.40,-1.05,-1.00,-1.15,-0.90,-1.05,-0.90,-0.95,-1.00,-0.65,-0.60,-0.85,-0.80,-0.55,-0.50,-0.45,-0.50,-0.45,-0.40,-0.15,-0.30,-0.25,-0.10,-0.15,-0.10,0.05,0.10,0.15,0.10,0.05,0.30,0.15,0.40,0.35},
            {-1.00,-1.15,-0.90,-1.15,-1.00,-0.85,-0.90,-0.95,-0.70,-0.95,-0.80,-0.95,-0.70,-0.65,-0.60,-0.55,-0.40,-0.45,-0.30,-0.25,-0.40,0.05,-0.20,-0.15,0.00,-0.05,0.10,-0.15,0.20,0.15,0.20,0.55,0.00,0.35,0.30},
            {-0.95,-1.20,-1.05,-0.90,-0.85,-0.90,-0.95,-1.00,-0.55,-0.50,-0.55,-0.60,-0.55,-0.60,-0.45,-0.70,-0.55,-0.60,-0.45,-0.30,-0.35,-0.10,-0.25,0.00,-0.15,0.00,-0.15,0.20,0.05,0.20,0.25,0.30,0.35,0.20,0.45},
            {-0.90,-1.15,-1.20,-1.15,-0.80,-0.75,-0.80,-0.85,-0.80,-0.55,-0.60,-0.65,-0.50,-0.35,-0.50,-0.65,-0.50,-0.35,-0.20,-0.05,0.00,-0.25,0.00,-0.25,0.10,-0.05,0.10,0.15,0.00,0.15,0.20,0.45,0.30,0.55,0.30},
            {-0.95,-0.90,-1.25,-0.90,-0.85,-0.80,-0.55,-0.50,-0.95,-0.90,-0.55,-0.70,-0.55,-0.30,-0.45,-0.60,-0.35,-0.30,-0.25,-0.20,-0.15,-0.20,-0.05,-0.40,-0.15,0.20,-0.25,0.10,0.05,0.00,0.55,0.10,0.15,0.50,0.45},
            {-1.10,-0.95,-1.00,-0.75,-0.90,-0.85,-0.70,-0.55,-0.70,-0.75,-0.60,-0.35,-0.60,-0.65,-0.20,-0.25,-0.20,-0.25,-0.10,-0.35,0.00,-0.05,0.00,-0.15,0.20,0.15,0.00,0.05,0.20,0.15,0.30,0.15,0.40,0.65,0.00},
            {-0.85,-1.10,-0.85,-0.80,-0.65,-0.60,-0.85,-0.70,-0.55,-0.70,-0.55,-0.60,-0.45,-0.30,-0.35,-0.10,-0.45,-0.30,-0.05,0.00,-0.25,0.00,0.05,0.20,0.05,0.00,0.25,-0.10,0.45,0.20,0.15,0.50,0.35,0.50,0.55},
            {-0.90,-0.95,-0.60,-0.55,-0.80,-0.75,-0.80,-0.45,-0.70,-0.55,-0.70,-0.65,-0.30,-0.15,-0.20,-0.55,-0.20,-0.15,-0.20,0.05,-0.10,-0.05,0.20,0.25,0.00,0.25,0.30,0.25,0.20,0.35,0.50,0.25,0.60,0.25,0.70},
            {-1.05,-0.80,-0.65,-0.60,-0.75,-0.90,-0.65,-0.40,-0.35,-0.40,-0.65,-0.50,-0.45,-0.20,-0.25,-0.10,-0.35,-0.30,-0.25,0.00,0.05,0.10,0.15,0.20,0.25,0.20,0.35,0.40,0.25,0.60,0.25,0.50,0.45,0.70,0.65},
            {-0.60,-0.85,-0.70,-0.55,-0.60,-0.75,-0.70,-0.55,-0.40,-0.55,-0.30,-0.55,-0.40,-0.35,-0.10,-0.35,0.00,-0.15,0.10,0.05,-0.20,0.15,-0.10,0.15,0.10,0.35,0.30,0.25,0.40,0.25,0.60,0.45,0.50,0.65,0.50},
            {-0.95,-0.60,-0.65,-0.70,-0.75,-0.80,-0.65,-0.60,-0.35,-0.30,-0.35,-0.30,-0.35,-0.10,0.05,-0.20,-0.05,0.00,0.05,-0.40,0.35,0.00,0.45,0.30,-0.05,0.10,0.15,0.40,0.35,0.20,0.25,0.60,0.55,0.50,0.75},
            {-0.60,-0.85,-0.70,-0.45,-0.60,-0.45,-0.40,-0.45,-0.30,-0.05,-0.40,-0.05,-0.20,-0.15,0.00,-0.05,-0.30,-0.05,0.00,0.15,0.10,0.25,-0.10,0.25,0.10,0.15,0.40,0.45,0.20,0.25,0.50,0.55,0.50,0.55,0.50},
            {-0.65,-0.70,-0.45,-0.40,-0.45,-0.40,-0.65,-0.60,-0.15,-0.20,-0.25,-0.50,-0.25,-0.40,-0.25,-0.10,0.05,0.10,0.15,0.20,-0.05,0.20,0.25,0.30,0.45,0.10,0.25,0.40,0.45,0.40,0.65,0.70,0.75,0.60,1.05},
            {-0.70,-0.65,-0.80,-0.65,-0.50,-0.35,-0.50,-0.45,0.00,-0.25,-0.10,-0.15,-0.50,-0.25,-0.20,-0.15,0.00,0.15,-0.30,0.05,0.40,0.15,0.10,0.15,0.40,0.35,0.30,0.45,0.70,0.75,0.50,0.65,0.60,0.75,0.70},
            {-0.65,-0.40,-0.65,-0.40,-0.55,-0.40,-0.25,-0.50,-0.55,-0.30,-0.15,-0.20,-0.05,-0.10,-0.15,0.10,0.05,0.20,0.05,0.30,0.35,0.30,0.25,0.40,0.45,0.50,0.55,0.40,0.65,0.70,0.75,0.60,0.55,0.80,0.75},
            {-0.50,-0.35,-0.40,-0.25,-0.40,-0.55,-0.40,-0.25,-0.10,-0.15,-0.20,-0.15,-0.10,-0.15,0.20,0.15,0.10,0.05,0.40,-0.15,0.10,0.25,0.40,0.55,0.70,0.45,0.80,0.65,0.70,0.75,0.70,0.55,1.00,0.85,1.00},
            {-0.55,-0.50,-0.35,-0.30,-0.15,-0.40,-0.15,-0.10,-0.35,-0.10,-0.15,-0.10,0.05,0.00,-0.25,0.30,0.15,0.30,-0.05,-0.10,0.15,0.20,0.55,0.30,0.55,0.60,0.25,0.60,0.45,0.80,0.55,0.90,0.95,0.80,0.95},
            {-0.30,-0.25,-0.40,-0.25,-0.40,-0.25,-0.30,-0.05,-0.30,-0.05,0.10,0.25,-0.10,0.15,-0.10,0.25,0.20,0.55,0.50,0.35,0.20,0.35,0.40,0.55,0.20,0.75,0.50,0.85,0.70,0.75,0.50,1.05,0.60,1.15,0.80},
            {-0.45,-0.60,-0.25,-0.30,-0.15,-0.10,-0.25,0.00,-0.05,0.10,-0.25,0.10,0.05,0.30,0.05,0.20,0.25,0.10,0.25,0.40,0.55,0.20,0.55,0.20,0.35,0.30,0.65,0.40,0.75,0.50,0.85,0.80,0.75,1.00,0.65},
            {-0.20,-0.35,-0.30,-0.05,0.10,-0.25,-0.20,-0.05,-0.10,-0.15,0.10,0.15,0.10,0.25,0.00,0.05,0.10,0.25,0.20,0.55,0.50,0.65,0.20,0.35,0.50,0.45,0.60,0.35,0.70,0.65,0.60,0.95,0.70,0.75,0.70},
            {-0.15,-0.10,-0.25,-0.30,-0.05,-0.10,-0.05,-0.30,-0.15,0.00,0.15,0.00,0.25,0.30,0.55,0.20,0.45,0.30,0.35,0.70,0.45,0.60,0.35,0.80,0.65,0.70,0.45,0.50,0.45,0.80,0.85,1.00,0.85,0.90,1.15},
            {-0.20,-0.05,-0.20,-0.25,-0.20,-0.15,0.10,-0.05,-0.10,0.15,0.10,-0.05,0.10,0.35,0.20,0.45,0.20,0.45,0.70,0.65,0.50,0.25,0.70,0.55,0.70,0.75,0.80,0.55,0.90,0.95,1.30,0.95,1.00,1.15,0.90},
            {-0.05,0.20,-0.05,0.10,0.15,-0.10,0.05,0.10,-0.05,-0.10,0.05,0.10,0.25,0.30,0.25,0.30,0.35,0.50,0.45,0.60,0.55,0.40,0.35,0.60,0.95,0.80,0.85,0.80,1.05,1.10,0.75,1.00,1.15,1.10,1.05},
            {-0.20,0.15,-0.20,-0.25,0.20,0.05,0.10,0.15,0.10,0.25,0.30,0.05,0.30,0.15,0.60,0.45,0.20,0.25,0.50,0.45,0.60,0.85,0.60,0.55,0.70,1.05,0.90,0.85,0.90,0.95,1.00,1.15,1.00,1.25,1.20},
            {-0.05,-0.20,-0.15,0.10,-0.05,-0.10,0.25,0.00,0.15,0.20,0.35,0.30,0.05,0.30,0.35,0.30,0.65,0.40,0.45,0.30,0.85,0.60,0.75,0.90,1.05,0.40,0.95,0.80,0.45,0.60,0.95,0.90,1.25,0.70,1.25},
            {0.00,0.05,0.10,0.15,0.20,0.25,0.10,0.05,0.40,0.25,0.20,0.25,0.30,0.45,0.50,0.65,0.40,0.65,0.50,0.55,0.20,0.65,0.70,0.85,0.90,0.95,0.50,0.75,0.90,0.75,0.90,0.95,1.20,1.35,1.20},
            {0.05,0.00,-0.15,0.20,-0.15,0.20,0.05,0.20,0.15,0.30,0.25,0.30,0.55,0.40,0.25,0.30,0.55,0.50,0.75,0.80,0.55,0.80,0.75,0.60,0.75,0.70,0.85,1.00,0.75,1.30,1.15,1.20,0.75,1.30,1.55},
            {0.30,0.15,0.00,0.05,0.10,0.25,0.10,0.35,0.40,0.25,0.40,0.65,0.40,0.45,0.30,0.55,0.40,0.65,0.40,0.75,1.10,0.85,0.40,0.75,0.70,0.75,1.10,0.75,1.10,0.75,1.40,0.75,1.10,0.85,1.60},
            {0.05,0.20,0.25,0.10,0.25,0.20,0.55,0.30,0.35,0.50,0.25,0.50,0.45,0.40,0.75,0.80,0.55,0.40,0.65,0.90,0.65,0.70,0.95,1.10,1.05,1.40,0.75,1.00,0.95,1.20,1.15,1.30,1.05,1.20,1.15},
            {0.00,0.35,0.20,0.15,0.20,0.35,0.10,0.45,0.10,0.35,0.30,0.65,0.60,0.65,0.60,0.65,0.80,0.65,0.60,0.95,0.80,0.95,0.90,1.05,1.20,1.05,1.10,0.85,0.80,1.25,1.30,1.25,1.20,1.35,1.50},
            {0.55,0.20,0.15,0.30,0.45,0.10,0.35,0.20,0.55,0.50,0.75,0.40,0.75,0.40,0.65,0.50,0.85,0.70,1.05,0.90,0.85,0.90,0.65,1.00,1.05,0.80,1.05,1.00,1.55,1.30,1.45,1.30,1.55,1.30,1.25},
            {0.30,0.55,0.30,0.35,0.30,0.25,0.60,0.35,0.60,0.65,0.50,0.55,0.80,0.75,0.80,0.75,1.00,0.75,1.20,0.95,0.90,1.05,1.30,1.35,0.90,1.05,1.10,0.95,1.10,1.45,1.20,1.55,1.80,1.35,1.40}
    };

    /**
     * NeckIntegralOnufrievConstants Static Class
     *
     */
    public static class NeckIntegralOnufrievConstants {
        private double Aij;
        private double Bij;

        public double getAij() {
            return this.Aij;
        }

        public double getBij() {
            return this.Bij;
        }

        public static double[] run(double rhoi, double rhoj) {

            double Aij = 0.0;
            double Bij = 0.0;

            // Find which two values of rho i and rho j the inputs fall between
            int lowi = 0;
            int lowj = 0;
            int highi = lowi + 1;
            int highj = lowj + 1;
            int[] iboundsInit = new int[]{lowi,highi};
            int[] jboundsInit = new int[]{lowj,highj};
            int[] bounds = new int[]{lowi,highi,lowj,highj};
            //int[] ibounds = new int[]{lowi,highi};
            //int[] jbounds = new int[]{lowj,highj};

            // If both rho i and rho j are in Aguilar/Onufriev data, get Aij and Bij values directly from tables
            if (rhoiRows.contains(rhoi) && rhojColumns.contains(rhoj)) {
                int row = rhoiRows.indexOf(rhoi);
                int col = rhojColumns.indexOf(rhoj);

                // If the benchmark values have been determined
                //if(AijAguilarOnufriev[row][col] != 999) {
                    Aij = AijAguilarOnufriev[row][col];
                    Bij = BijAguilarOnufriev[row][col];
                //} else {
                    // Determine closest values for interpolation
                //}
            } else {
                // Otherwise, interpolate/extrapolate as needed
                boolean calculatei = false;
                //boolean counti = true;
                boolean calculatej = false;
                //boolean countj = true;

                if (!rhoiRows.contains(rhoi)) {
                    calculatei = true;
                    iboundsInit = determineijBounds(rhoi,lowi,highi);
                    // If input rho i is smaller than all values in table, extrapolate down using first two table values
                    // These values are the defaults (set above)
//                    if (rhoiRows.get(0) > rhoi) {
//                        counti = false;
//                    }
//                    // If input rho i is larger than all values in table, extrapolate up using last two table values
//                    if (rhoiRows.get(rhoiRows.size() - 1) < rhoi) {
//                        lowi = rhoiRows.size() - 2;
//                        highi = rhoiRows.size() - 1;
//                        counti = false;
//                    }
//                    while (counti) {
//                        // Find the two table values that the input rho i falls between
//                        if (rhoiRows.get(lowi) < rhoi && rhoi < rhoiRows.get(lowi + 1)) {
//                            highi = lowi + 1;
//                            counti = false;
//                        } else {
//                            lowi++;
//                        }
//                        if (lowi >= rhoiRows.size()) {
//                            counti = false;
//                        }
//                    }
                }

                if (!rhojColumns.contains(rhoj)) {
                    calculatej = true;
                    jboundsInit = determineijBounds(rhoj,lowj,highj);
                    // If input rho j is smaller than all values in table, extrapolate down using first two table values
                    // These values are the defaults (set above)
//                    if (rhojColumns.get(0) > rhoj) {
//                        countj = false;
//                    }
//                    // If input j is larger than all values in table, extrapolate up using last two table values
//                    if (rhojColumns.get(rhojColumns.size() - 1) < rhoj) {
//                        lowj = rhojColumns.size() - 2;
//                        highj = rhojColumns.size() - 1;
//                        countj = false;
//                    }
//                    while (countj) {
//                        // Find the two table values that the input rho j falls between
//                        if (rhojColumns.get(lowj) < rhoj && rhoj < rhojColumns.get(lowj + 1)) {
//                            highj = lowj + 1;
//                            countj = false;
//                        } else {
//                            lowj++;
//                        }
//                        if (lowj >= rhojColumns.size()) {
//                            countj = false;
//                        }
//                    }
                }

                bounds = determineClosestCalculatedValues(iboundsInit,jboundsInit,rhoi,rhoj);

                // If the values of rho i and rho j aren't in table, interpolate/extrapolate
                double startInterp_i = rhoiRows.get(bounds[0]);
                double endInterp_i = rhoiRows.get(bounds[1]);
                double startInterp_j = rhojColumns.get(bounds[2]);
                double endInterp_j = rhojColumns.get(bounds[3]);

                if (calculatei && calculatej) {
                    // Rho i and rho j aren't table values
                    Aij = interpolateAij(startInterp_i, endInterp_i, startInterp_j, endInterp_j, rhoi, rhoj);
                    Bij = interpolateBij(startInterp_i, endInterp_i, startInterp_j, endInterp_j, rhoi, rhoj);
                }
                // Rho i is in table, but rho j isn't
                if (!calculatei && calculatej) {
                    Aij = interpolateAij(rhoi, rhoi, startInterp_j, endInterp_j, rhoi, rhoj);
                    Bij = interpolateBij(rhoi, rhoi, startInterp_j, endInterp_j, rhoi, rhoj);
                }
                // Rho i isn't in table, but rho j is
                if (calculatei && !calculatej) {
                    Aij = interpolateAij(startInterp_i, endInterp_i, rhoj, rhoj, rhoi, rhoj);
                    Bij = interpolateBij(startInterp_i, endInterp_i, rhoj, rhoj, rhoi, rhoj);
                }
            }

            // Never let Aij be negative
            if(Aij < 0.00){ Aij = 0.0; }

            return new double[]{Aij, Bij};
        }
    }

    private static int[] determineClosestCalculatedValues(int[] iboundsInit, int[] jboundsInit, double rhoi, double rhoj){

        int lowi = iboundsInit[0];
        int lowj = jboundsInit[0];
        int highi = iboundsInit[1];
        int highj = jboundsInit[1];
        int uselowi = lowi;
        int usehighi = highi;

        // Find lowi
        for(int i = iboundsInit[0];i>0;i--){
            if(AijAguilarOnufriev[i][jboundsInit[0]] != 999 || AijAguilarOnufriev[i][jboundsInit[1]] != 999){
                lowi = i;
                i = -1;
            }
        }
        // Find highi
        for(int i = iboundsInit[1];i<benchmarkedRadii.size();i++){
            if(AijAguilarOnufriev[i][jboundsInit[0]] != 999 || AijAguilarOnufriev[i][jboundsInit[1]] != 999){
                highi = i;
                i = -1;
            }
        }

        //if(emptyi.contains(rhoi)){
            uselowi = lowi;
            usehighi = highi;
        //}

        // Find lowj
        for(int j = jboundsInit[0];j>0;j--){
            if(AijAguilarOnufriev[uselowi][j] != 999 || AijAguilarOnufriev[usehighi][j] != 999){
                lowj = j;
                j = -1;
            }
        }
        // Find highj
        for(int j = jboundsInit[1];j<benchmarkedRadii.size();j++){
            if(AijAguilarOnufriev[uselowi][j] != 999 || AijAguilarOnufriev[usehighi][j] != 999){
                highj = j;
                j = -1;
            }
        }
        return new int[]{lowi,highi,lowj,highj};
    }

    private static int[] determineijBounds(double rho, int defaultLow, int defaultHigh){
        boolean count = true;

        // If input rho is smaller than all values in table, extrapolate down using first two table values
        // These values are the defaults (set above)
        if (benchmarkedRadii.get(0) > rho) {
            count = false;
        }
        // If input rho is larger than all values in table, extrapolate up using last two table values
        if (benchmarkedRadii.get(benchmarkedRadii.size() - 1) < rho) {
            defaultLow = benchmarkedRadii.size() - 2;
            defaultHigh = benchmarkedRadii.size() - 1;
            count = false;
        }
        while (count) {
            // Find the two table values that the input rho falls between
            if (benchmarkedRadii.get(defaultLow) < rho && rho < benchmarkedRadii.get(defaultLow + 1)) {
                defaultHigh = defaultLow + 1;
                count = false;
            } else {
                defaultLow++;
            }
            if (defaultLow >= benchmarkedRadii.size()) {
                count = false;
            }
        }
        return new int[]{defaultLow,defaultHigh};
    }

    private static double interpolateAij(double startInterp_i, double endInterp_i, double startInterp_j, double endInterp_j, double rhoi, double rhoj){

        double Aij;
        if(startInterp_i == endInterp_i){
            // 1D interpolation: Only interpolate between rho j values
            Aij = interpolate1D(startInterp_j, endInterp_j, rhoj,
                    AijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    AijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(endInterp_j)]);

        } else if(startInterp_j == endInterp_j){
            // 1D interpolation: Only interpolate between rho i values
            Aij = interpolate1D(startInterp_i, endInterp_i, rhoi,
                    AijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    AijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(endInterp_j)]);
        } else{
            // 2D interpolation: Interpolate both values
            Aij = interpolate2D(startInterp_i, endInterp_i, startInterp_j, endInterp_j,rhoi, rhoj,
                    AijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    AijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    AijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(endInterp_j)],
                    AijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(endInterp_j)]);
        }
        return Aij;
    }

    private static double interpolateBij(double startInterp_i, double endInterp_i, double startInterp_j, double endInterp_j, double rhoi, double rhoj){

        double Bij;

        if(startInterp_i == endInterp_i){
            // 1D interpolation: Only interpolate between rho j values
            Bij = interpolate1D(startInterp_j, endInterp_j, rhoj,
                    BijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    BijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(endInterp_j)]);
        } else if(startInterp_j == endInterp_j){
            // 1D interpolation: Only interpolate between rho i values
            Bij = interpolate1D(startInterp_i, endInterp_i, rhoi,
                    BijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    BijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(endInterp_j)]);
        } else{
            // 2D interpolation: Interpolate both values
            Bij = interpolate2D(startInterp_i, endInterp_i, startInterp_j, endInterp_j, rhoi, rhoj,
                    BijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    BijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(startInterp_j)],
                    BijAguilarOnufriev[rhoiRows.indexOf(startInterp_i)][rhojColumns.indexOf(endInterp_j)],
                    BijAguilarOnufriev[rhoiRows.indexOf(endInterp_i)][rhojColumns.indexOf(endInterp_j)]);
        }
        return Bij;
    }

    private static double interpolate1D(double y1, double y2, double y, double fxy1, double fxy2){
        double frac1 = (y2 - y)/(y2 - y1);
        double frac2 = (y - y1)/(y2 - y1);
        double product1 = frac1 * fxy1;
        double product2 = frac2 * fxy2;

        return product1 + product2;
    }

    private static double interpolate2D(double x1, double x2, double y1, double y2, double x, double y,
                                 double fx1y1, double fx2y1, double fx1y2, double fx2y2){
        double fxy = 0.0;
        double fxy1 = (x2 - x)/(x2 -x1) * fx1y1 + (x - x1)/(x2 - x1) * fx2y1;
        double fxy2 = (x2 -x)/(x2 - x1) * fx1y2 + (x - x1)/(x2 - x1) * fx2y2;

        fxy = (y2 - y)/(y2 - y1) * fxy1 + (y - y1)/(y2 - y1) * fxy2;

        return fxy;
    }

}
