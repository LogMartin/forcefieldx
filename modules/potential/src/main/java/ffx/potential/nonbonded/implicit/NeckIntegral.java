// ******************************************************************************
//
// Title:       Force Field X.
// Description: Force Field X - Software for Molecular Biophysics.
// Copyright:   Copyright (c) Michael J. Schnieders 2001-2021.
//
// This file is part of Force Field X.
//
// Force Field X is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 3 as published by
// the Free Software Foundation.
//
// Force Field X is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// Force Field X; if not, write to the Free Software Foundation, Inc., 59 Temple
// Place, Suite 330, Boston, MA 02111-1307 USA
//
// Linking this library statically or dynamically with other modules is making a
// combined work based on this library. Thus, the terms and conditions of the
// GNU General Public License cover the whole combination.
//
// As a special exception, the copyright holders of this library give you
// permission to link this library with independent modules to produce an
// executable, regardless of the license terms of these independent modules, and
// to copy and distribute the resulting executable under terms of your choice,
// provided that you also meet, for each linked independent module, the terms
// and conditions of the license of that module. An independent module is a
// module which is not derived from or based on this library. If you modify this
// library, you may extend this exception to your version of the library, but
// you are not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// ******************************************************************************
package ffx.potential.nonbonded.implicit;

import static java.lang.String.format;
import static org.apache.commons.math3.util.FastMath.floor;

import java.util.logging.Logger;

/**
 * This class is used to compute interstitial space integrals of the form 1/r^6.
 * <p>
 * Inputs: radius of atom i (rho i) and radius of atom j (rho j) Outputs: Aij and Bij
 * (interpolated/extrapolated from pre-determined tables)
 * <p>
 * Aij and Bij are constants used in the approximation of the 1/r^6 integral over pairwise neck
 * regions described in Aguilar et. al. 2010. The neck integral approximation is as follows:
 * <p>
 * neck_integral(rij, rho i, rho j) = Aij * (rij - Bij)^4 * (rho i + rho j + 2 * rho w - rij)^4
 * </p>
 * Where rij is the separation distance between atoms i and j with radii rho i and rho j,
 * respectively, and rho w is the radius of water (1.4 A).
 * <p>
 * Aij and Bij are determined for a set of discrete radii based on benchmark PB calculations of the
 * maximum separation distance and neck integral value. Bij is set as 2*(maximum rij) - (rho i + rho
 * j + 2 * rho w) and Aij is set such that the value of the neck integral approximation at the
 * maximum separation distance matches the maximum neck integral value calculated using PB.
 * <p>
 * Citations: Aguilar, B.; Shadrach, R.; Onufriev, A. V. Reducing the secondary structure bias in the
 * generalized Born model via R6 effective radii. J. Chem. Theory Comput. 2010, 6, 3613âˆ’3630.
 *
 * @author Rae A. Corrigan
 * @since 1.0
 */
public class NeckIntegral {

    private static final Logger logger = Logger.getLogger(NeckIntegral.class.getName());

    /**
     * The set of radii values covered by the Aij & Bij tables (0.80 A to 2.50 A in increments of 0.05
     * A).
     * <p>
     * The intent is to use AMOEBA van der Waals radii as input, which fall within this range. The use
     * of fit electrostatic radii is possible, but was not studied.
     * <p>
     * For values outside the studied range, extrapolation is performed. For value within the studied
     * range, but not at stored points, interpolation is performed.
     */
    private static final double[] radArray = {
            0.80, 0.85, 0.90, 0.95, 1.00, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40,
            1.45, 1.50, 1.55, 1.60, 1.65, 1.70, 1.75, 1.80, 1.85, 1.90, 1.95, 2.00, 2.05,
            2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.45, 2.50};

    private static final double MINIMUM_RADIUS = 0.80;
    private static final double MAXIMUM_RADIUS = 2.50;
    private static final double SPACING = 0.05;
    private static final int NUM_POINTS = radArray.length;

    /**
     * Get the Table indices based on the supplied radius value.
     *
     * @param rho Radius value (A).
     * @return The Aij/Bij Table indices for one dimension.
     */
    private static int[] getBounds(double rho) {
        double calculateIndex = (rho - MINIMUM_RADIUS) / SPACING;
        int below = (int) floor(calculateIndex);
        int above = below + 1;

        if (above >= NUM_POINTS) {
            // Extrapolate up from the top table values.
            below = NUM_POINTS - 1;
            above = NUM_POINTS - 2;
        } else if (below < 0) {
            // If below is less than 0, extrapolate down from the bottom table values.
            below = 0;
            above = 1;
        }

        return new int[]{below, above};
    }


    /**
     * The magnitude of the Neck integral, parameterized by two input atomic radii sizes.
     * <p>
     * Aij is a (non-symmetric) 35x35 array of parameterized constants last updated 02 Feb 22 by Rae
     * Corrigan.
     * <p>
     * The units of the Aij matrix are Angstroms^(-11).
     * <p>
     * Usage is as follows: Aij[decreened][descreener]
     */
    private static final double[][] Aij = {
            {0.0004839020, 0.0004898050, 0.0003048810, 0.0003313100, 0.0003712960, 0.0004067380, 0.0003609580, 0.0004063690, 0.0002048350, 0.0002331420, 0.0002763830, 0.0002447380, 0.0002878720, 0.0003298450, 0.0002953100, 0.0002545300, 0.0003020920, 0.0003507610, 0.0003064550, 0.0002084540, 0.0003147090, 0.0003593290, 0.0003162120, 0.0003746120, 0.0003312290, 0.0002898090, 0.0004491340, 0.0003945490, 0.0004541580, 0.0003018130, 0.0004636140, 0.0004048020, 0.0004653460, 0.0003135650, 0.0002742920},
            {0.0003739540, 0.0003856280, 0.0003985330, 0.0001893110, 0.0002664500, 0.0002308340, 0.0002484590, 0.0002841320, 0.0002476370, 0.0002887430, 0.0003314070, 0.0001654590, 0.0002521000, 0.0002283100, 0.0001571310, 0.0002284390, 0.0002074780, 0.0001800620, 0.0002118270, 0.0001871430, 0.0002191850, 0.0003337320, 0.0003045180, 0.0003456580, 0.0003043800, 0.0003541780, 0.0003080630, 0.0003562840, 0.0003138300, 0.0002730880, 0.0003213330, 0.0002125450, 0.0002523260, 0.0001682770, 0.0002511660},
            {0.0003021970, 0.0003064460, 0.0003119930, 0.0002543750, 0.0002679450, 0.0002238610, 0.0001433290, 0.0002117030, 0.0001852230, 0.0001572870, 0.0001778900, 0.0002107940, 0.0001807560, 0.0001600780, 0.0002441130, 0.0001668620, 0.0002420770, 0.0002181040, 0.0001505190, 0.0001764160, 0.0001498080, 0.0001806340, 0.0002043390, 0.0001843120, 0.0002091790, 0.0002472010, 0.0002178690, 0.0002488560, 0.0001701420, 0.0002561890, 0.0001694550, 0.0002588540, 0.0001741950, 0.0002653720, 0.0002321720},
            {0.0003337870, 0.0001868820, 0.0002498850, 0.0002640790, 0.0001573770, 0.0002218440, 0.0001419650, 0.0001514870, 0.0001361320, 0.0001953220, 0.0001318580, 0.0001465500, 0.0001280650, 0.0001932040, 0.0001721920, 0.0001967660, 0.0001786720, 0.0001517370, 0.0001767150, 0.0001560800, 0.0001813220, 0.0001223830, 0.0001866950, 0.0001251860, 0.0001432270, 0.0001286260, 0.0001483140, 0.0001750570, 0.0001988940, 0.0001375720, 0.0002006950, 0.0001397790, 0.0001580860, 0.0001400910, 0.0001578740},
            {0.0003650560, 0.0002056920, 0.0002666600, 0.0001578850, 0.0001610490, 0.0001745860, 0.0001417560, 0.0001539940, 0.0001712070, 0.0001100910, 0.0001618050, 0.0000818000, 0.0000929000, 0.0001085960, 0.0000938000, 0.0001093000, 0.0000952000, 0.0001409070, 0.0000985000, 0.0001129930, 0.0000996000, 0.0001512390, 0.0001333090, 0.0001524110, 0.0001055070, 0.0001536040, 0.0001052880, 0.0001215040, 0.0001104560, 0.0001213960, 0.0001087750, 0.0001264280, 0.0001478520, 0.0001282300, 0.0001492160},
            {0.0004235540, 0.0002216990, 0.0001718790, 0.0001635000, 0.0001717290, 0.0001345070, 0.0001069380, 0.0001155700, 0.0001302360, 0.0001477810, 0.0001225140, 0.0001039040, 0.0000865000, 0.0001011550, 0.0000882000, 0.0001046210, 0.0001174130, 0.0000800000, 0.0001182650, 0.0000623000, 0.0001197940, 0.0000827000, 0.0000939000, 0.0001112810, 0.0000954000, 0.0001132140, 0.0000979000, 0.0001149000, 0.0000989000, 0.0001177000, 0.0000780000, 0.0001211770, 0.0001055580, 0.0001191750, 0.0001077110},
            {0.0003767040, 0.0001931970, 0.0001855980, 0.0001395140, 0.0001437220, 0.0001903170, 0.0001532250, 0.0001618530, 0.0000995000, 0.0001092400, 0.0000950000, 0.0000786000, 0.0000910000, 0.0001012370, 0.0000891000, 0.0000988000, 0.0000675000, 0.0000765000, 0.0000902000, 0.0001035860, 0.0000892000, 0.0001036120, 0.0000921000, 0.0001056840, 0.0001220550, 0.0001072650, 0.0001225210, 0.0000830000, 0.0000957000, 0.0000501000, 0.0000988000, 0.0001142450, 0.0001003890, 0.0000678000, 0.0001006540},
            {0.0002349990, 0.0002228630, 0.0001208270, 0.0001579170, 0.0001547440, 0.0001223200, 0.0001639690, 0.0001351040, 0.0000616000, 0.0001153620, 0.0000937000, 0.0000610000, 0.0000679000, 0.0000773000, 0.0000655000, 0.0000749000, 0.0000859000, 0.0000754000, 0.0000498000, 0.0000756000, 0.0000672000, 0.0000579000, 0.0000688000, 0.0000786000, 0.0000690000, 0.0000785000, 0.0000693000, 0.0000601000, 0.0000544000, 0.0000816000, 0.0000735000, 0.0000821000, 0.0000738000, 0.0000495000, 0.0000753000},
            {0.0002725370, 0.0002472860, 0.0001791690, 0.0001749890, 0.0001282500, 0.0000978000, 0.0000765000, 0.0001078640, 0.0000860000, 0.0000897000, 0.0000741000, 0.0000829000, 0.0000682000, 0.0000438000, 0.0000654000, 0.0000570000, 0.0000827000, 0.0000561000, 0.0000825000, 0.0000429000, 0.0000623000, 0.0000569000, 0.0000482000, 0.0000572000, 0.0000494000, 0.0000590000, 0.0000509000, 0.0000583000, 0.0000525000, 0.0000456000, 0.0000519000, 0.0000615000, 0.0000317000, 0.0000625000, 0.0000712000},
            {0.0002422050, 0.0001666660, 0.0002027310, 0.0001998350, 0.0001530620, 0.0001088060, 0.0000639000, 0.0000861000, 0.0000942000, 0.0000567000, 0.0000601000, 0.0000839000, 0.0000547000, 0.0000602000, 0.0000510000, 0.0000559000, 0.0000497000, 0.0000553000, 0.0000645000, 0.0000536000, 0.0000478000, 0.0000722000, 0.0000642000, 0.0000427000, 0.0000483000, 0.0000430000, 0.0000487000, 0.0000427000, 0.0000664000, 0.0000579000, 0.0000508000, 0.0000349000, 0.0000672000, 0.0000354000, 0.0000687000},
            {0.0002220110, 0.0002532370, 0.0001802040, 0.0001706860, 0.0001635280, 0.0000957000, 0.0000925000, 0.0000951000, 0.0000564000, 0.0000609000, 0.0000620000, 0.0000400000, 0.0000563000, 0.0000639000, 0.0000527000, 0.0000435000, 0.0000376000, 0.0000425000, 0.0000370000, 0.0000418000, 0.0000365000, 0.0000409000, 0.0000481000, 0.0000415000, 0.0000479000, 0.0000317000, 0.0000368000, 0.0000554000, 0.0000371000, 0.0000424000, 0.0000383000, 0.0000433000, 0.0000393000, 0.0000442000, 0.0000395000},
            {0.0003292960, 0.0001718890, 0.0002132370, 0.0001923530, 0.0001087730, 0.0001059150, 0.0000809000, 0.0001036060, 0.0000844000, 0.0000843000, 0.0000398000, 0.0000414000, 0.0000346000, 0.0000498000, 0.0000546000, 0.0000604000, 0.0000380000, 0.0000329000, 0.0000282000, 0.0000324000, 0.0000276000, 0.0000320000, 0.0000352000, 0.0000317000, 0.0000359000, 0.0000316000, 0.0000366000, 0.0000323000, 0.0000277000, 0.0000329000, 0.0000367000, 0.0000433000, 0.0000287000, 0.0000335000, 0.0000295000},
            {0.0002854050, 0.0002576910, 0.0001873790, 0.0001281320, 0.0001229090, 0.0000890000, 0.0000888000, 0.0000686000, 0.0000723000, 0.0000414000, 0.0000566000, 0.0000339000, 0.0000370000, 0.0000304000, 0.0000437000, 0.0000276000, 0.0000409000, 0.0000446000, 0.0000389000, 0.0000330000, 0.0000219000, 0.0000420000, 0.0000218000, 0.0000247000, 0.0000274000, 0.0000318000, 0.0000364000, 0.0000316000, 0.0000282000, 0.0000420000, 0.0000284000, 0.0000427000, 0.0000286000, 0.0000254000, 0.0000287000},
            {0.0002563310, 0.0002286810, 0.0001191930, 0.0001500650, 0.0000815000, 0.0001068200, 0.0000590000, 0.0000759000, 0.0000772000, 0.0000621000, 0.0000626000, 0.0000491000, 0.0000394000, 0.0000432000, 0.0000477000, 0.0000299000, 0.0000322000, 0.0000355000, 0.0000298000, 0.0000153000, 0.0000386000, 0.0000330000, 0.0000378000, 0.0000245000, 0.0000165000, 0.0000191000, 0.0000213000, 0.0000242000, 0.0000216000, 0.0000245000, 0.0000287000, 0.0000422000, 0.0000290000, 0.0000324000, 0.0000226000},
            {0.0003045450, 0.0001551850, 0.0001876110, 0.0001312270, 0.0001230900, 0.0000903000, 0.0000882000, 0.0000856000, 0.0000665000, 0.0000658000, 0.0000522000, 0.0000556000, 0.0000333000, 0.0000467000, 0.0000506000, 0.0000314000, 0.0000196000, 0.0000283000, 0.0000241000, 0.0000270000, 0.0000224000, 0.0000256000, 0.0000217000, 0.0000252000, 0.0000166000, 0.0000246000, 0.0000279000, 0.0000246000, 0.0000210000, 0.0000148000, 0.0000125000, 0.0000192000, 0.0000217000, 0.0000254000, 0.0000221000},
            {0.0004449070, 0.0001733170, 0.0002177320, 0.0001497980, 0.0001407750, 0.0001072790, 0.0000999000, 0.0000579000, 0.0000758000, 0.0000572000, 0.0000585000, 0.0000265000, 0.0000360000, 0.0000226000, 0.0000308000, 0.0000261000, 0.0000364000, 0.0000295000, 0.0000255000, 0.0000209000, 0.0000234000, 0.0000202000, 0.0000234000, 0.0000198000, 0.0000226000, 0.0000190000, 0.0000168000, 0.0000248000, 0.0000219000, 0.0000146000, 0.0000218000, 0.0000146000, 0.0000168000, 0.0000149000, 0.0000220000},
            {0.0003949740, 0.0002694890, 0.0001852840, 0.0001763700, 0.0000963000, 0.0000907000, 0.0000677000, 0.0000873000, 0.0000847000, 0.0000490000, 0.0000378000, 0.0000385000, 0.0000230000, 0.0000317000, 0.0000334000, 0.0000361000, 0.0000389000, 0.0000246000, 0.0000200000, 0.0000174000, 0.0000246000, 0.0000124000, 0.0000137000, 0.0000152000, 0.0000173000, 0.0000152000, 0.0000170000, 0.0000151000, 0.0000170000, 0.0000193000, 0.0000221000, 0.0000192000, 0.0000131000, 0.0000192000, 0.0000132000},
            {0.0003476970, 0.0003141880, 0.0002155700, 0.0001520390, 0.0001427550, 0.0001388320, 0.0000770000, 0.0000751000, 0.0000555000, 0.0000433000, 0.0000435000, 0.0000432000, 0.0000348000, 0.0000351000, 0.0000370000, 0.0000301000, 0.0000247000, 0.0000266000, 0.0000170000, 0.0000182000, 0.0000204000, 0.0000224000, 0.0000249000, 0.0000125000, 0.0000180000, 0.0000157000, 0.0000229000, 0.0000119000, 0.0000170000, 0.0000117000, 0.0000131000, 0.0000119000, 0.0000131000, 0.0000153000, 0.0000171000},
            {0.0003923190, 0.0002765170, 0.0001987560, 0.0001385110, 0.0001260990, 0.0000919000, 0.0000868000, 0.0000501000, 0.0000628000, 0.0000634000, 0.0000633000, 0.0000370000, 0.0000297000, 0.0000234000, 0.0000322000, 0.0000253000, 0.0000205000, 0.0000169000, 0.0000316000, 0.0000195000, 0.0000216000, 0.0000138000, 0.0000154000, 0.0000170000, 0.0000195000, 0.0000163000, 0.0000187000, 0.0000121000, 0.0000140000, 0.0000207000, 0.0000180000, 0.0000091400, 0.0000137000, 0.0000156000, 0.0000178000},
            {0.0002737820, 0.0002478560, 0.0001294120, 0.0001637850, 0.0001120520, 0.0001096010, 0.0000780000, 0.0000761000, 0.0000430000, 0.0000547000, 0.0000416000, 0.0000422000, 0.0000329000, 0.0000260000, 0.0000159000, 0.0000285000, 0.0000228000, 0.0000184000, 0.0000195000, 0.0000097900, 0.0000133000, 0.0000148000, 0.0000162000, 0.0000180000, 0.0000151000, 0.0000131000, 0.0000145000, 0.0000164000, 0.0000108000, 0.0000073200, 0.0000141000, 0.0000092700, 0.0000140000, 0.0000120000, 0.0000139000},
            {0.0003196740, 0.0002216410, 0.0001144480, 0.0001779950, 0.0001284690, 0.0001217390, 0.0001162290, 0.0000508000, 0.0000640000, 0.0000627000, 0.0000363000, 0.0000479000, 0.0000283000, 0.0000382000, 0.0000297000, 0.0000238000, 0.0000191000, 0.0000267000, 0.0000218000, 0.0000177000, 0.0000114000, 0.0000209000, 0.0000135000, 0.0000149000, 0.0000125000, 0.0000141000, 0.0000091000, 0.0000136000, 0.0000114000, 0.0000130000, 0.0000144000, 0.0000129000, 0.0000110000, 0.0000127000, 0.0000108000},
            {0.0003645970, 0.0003305810, 0.0002348480, 0.0001202410, 0.0000871000, 0.0000831000, 0.0001035390, 0.0000592000, 0.0000731000, 0.0000554000, 0.0000408000, 0.0000320000, 0.0000421000, 0.0000250000, 0.0000338000, 0.0000203000, 0.0000208000, 0.0000132000, 0.0000137000, 0.0000150000, 0.0000163000, 0.0000102000, 0.0000144000, 0.0000071000, 0.0000079800, 0.0000067400, 0.0000098900, 0.0000080900, 0.0000096400, 0.0000102000, 0.0000091300, 0.0000100000, 0.0000088800, 0.0000130000, 0.0000086700},
            {0.0003177180, 0.0002965110, 0.0002023260, 0.0001414900, 0.0001763730, 0.0000726000, 0.0000700000, 0.0000894000, 0.0000489000, 0.0000483000, 0.0000625000, 0.0000364000, 0.0000282000, 0.0000370000, 0.0000172000, 0.0000231000, 0.0000139000, 0.0000186000, 0.0000198000, 0.0000164000, 0.0000134000, 0.0000146000, 0.0000071300, 0.0000077100, 0.0000141000, 0.0000072200, 0.0000077800, 0.0000051900, 0.0000096300, 0.0000065700, 0.0000055500, 0.0000082000, 0.0000090700, 0.0000104000, 0.0000068300},
            {0.0003836200, 0.0002587860, 0.0002366800, 0.0001653920, 0.0001164790, 0.0000641000, 0.0000848000, 0.0000773000, 0.0000572000, 0.0000436000, 0.0000420000, 0.0000412000, 0.0000328000, 0.0000247000, 0.0000331000, 0.0000261000, 0.0000204000, 0.0000125000, 0.0000101000, 0.0000182000, 0.0000117000, 0.0000122000, 0.0000077100, 0.0000143000, 0.0000092200, 0.0000099900, 0.0000064700, 0.0000056200, 0.0000048000, 0.0000067800, 0.0000076000, 0.0000066300, 0.0000073400, 0.0000064600, 0.0000054800},
            {0.0004312370, 0.0002300120, 0.0002023030, 0.0001460830, 0.0001351290, 0.0000979000, 0.0000706000, 0.0000679000, 0.0000490000, 0.0000477000, 0.0000482000, 0.0000360000, 0.0000271000, 0.0000216000, 0.0000287000, 0.0000225000, 0.0000134000, 0.0000138000, 0.0000199000, 0.0000117000, 0.0000094400, 0.0000079600, 0.0000109000, 0.0000090100, 0.0000101000, 0.0000084400, 0.0000092500, 0.0000058700, 0.0000086000, 0.0000073000, 0.0000107000, 0.0000089700, 0.0000061000, 0.0000086800, 0.0000045900},
            {0.0002909360, 0.0002731410, 0.0001863080, 0.0001700910, 0.0001561490, 0.0001134290, 0.0000627000, 0.0000787000, 0.0000582000, 0.0000430000, 0.0000326000, 0.0000417000, 0.0000323000, 0.0000321000, 0.0000146000, 0.0000117000, 0.0000155000, 0.0000156000, 0.0000096800, 0.0000134000, 0.0000083000, 0.0000086900, 0.0000092400, 0.0000131000, 0.0000109000, 0.0000092400, 0.0000077000, 0.0000065200, 0.0000092000, 0.0000080100, 0.0000086700, 0.0000098700, 0.0000063500, 0.0000042800, 0.0000048000},
            {0.0003389790, 0.0002340480, 0.0002134080, 0.0001452810, 0.0001392990, 0.0000760000, 0.0000708000, 0.0000910000, 0.0000672000, 0.0000378000, 0.0000370000, 0.0000480000, 0.0000278000, 0.0000366000, 0.0000286000, 0.0000131000, 0.0000172000, 0.0000107000, 0.0000142000, 0.0000112000, 0.0000157000, 0.0000128000, 0.0000079200, 0.0000065300, 0.0000070400, 0.0000099100, 0.0000063700, 0.0000068800, 0.0000059500, 0.0000064100, 0.0000055400, 0.0000061500, 0.0000068200, 0.0000059000, 0.0000051100},
            {0.0003954740, 0.0002707460, 0.0002469310, 0.0001737640, 0.0000947000, 0.0001140290, 0.0001081350, 0.0000601000, 0.0000763000, 0.0000442000, 0.0000328000, 0.0000323000, 0.0000190000, 0.0000246000, 0.0000146000, 0.0000250000, 0.0000148000, 0.0000118000, 0.0000158000, 0.0000095700, 0.0000134000, 0.0000082700, 0.0000088200, 0.0000093500, 0.0000101000, 0.0000110000, 0.0000090700, 0.0000058500, 0.0000082900, 0.0000053500, 0.0000046000, 0.0000050600, 0.0000056800, 0.0000036400, 0.0000041600},
            {0.0004479560, 0.0003131070, 0.0001648670, 0.0001152290, 0.0001084540, 0.0000999000, 0.0000740000, 0.0000935000, 0.0000522000, 0.0000500000, 0.0000288000, 0.0000373000, 0.0000279000, 0.0000211000, 0.0000164000, 0.0000227000, 0.0000132000, 0.0000103000, 0.0000139000, 0.0000144000, 0.0000087600, 0.0000071700, 0.0000058400, 0.0000080400, 0.0000112000, 0.0000071200, 0.0000035300, 0.0000048400, 0.0000069300, 0.0000076800, 0.0000038100, 0.0000042400, 0.0000059600, 0.0000051300, 0.0000056900},
            {0.0003950100, 0.0002773200, 0.0001894830, 0.0001351390, 0.0001213850, 0.0000902000, 0.0000871000, 0.0001076320, 0.0000602000, 0.0000450000, 0.0000255000, 0.0000429000, 0.0000332000, 0.0000188000, 0.0000148000, 0.0000146000, 0.0000149000, 0.0000119000, 0.0000158000, 0.0000073400, 0.0000101000, 0.0000136000, 0.0000108000, 0.0000041600, 0.0000072400, 0.0000046800, 0.0000050600, 0.0000054100, 0.0000044200, 0.0000063300, 0.0000040900, 0.0000059200, 0.0000049800, 0.0000073200, 0.0000047000},
            {0.0003424020, 0.0002436410, 0.0001690670, 0.0001547280, 0.0001068500, 0.0001029240, 0.0000750000, 0.0000732000, 0.0000404000, 0.0000521000, 0.0000497000, 0.0000377000, 0.0000167000, 0.0000282000, 0.0000286000, 0.0000220000, 0.0000101000, 0.0000133000, 0.0000083300, 0.0000109000, 0.0000150000, 0.0000089200, 0.0000043900, 0.0000059200, 0.0000048300, 0.0000051000, 0.0000073100, 0.0000045800, 0.0000065000, 0.0000053200, 0.0000059000, 0.0000029400, 0.0000055000, 0.0000022400, 0.0000052100},
            {0.0003065080, 0.0002798880, 0.0001959810, 0.0001769900, 0.0001246930, 0.0001218000, 0.0000855000, 0.0000835000, 0.0000797000, 0.0000348000, 0.0000436000, 0.0000255000, 0.0000253000, 0.0000192000, 0.0000193000, 0.0000254000, 0.0000192000, 0.0000089800, 0.0000092600, 0.0000124000, 0.0000075500, 0.0000077500, 0.0000082400, 0.0000086700, 0.0000119000, 0.0000100000, 0.0000047000, 0.0000050500, 0.0000042400, 0.0000035300, 0.0000049300, 0.0000043000, 0.0000027700, 0.0000038400, 0.0000055700},
            {0.0003558290, 0.0002510060, 0.0002300940, 0.0001578120, 0.0001471920, 0.0001056340, 0.0000754000, 0.0000571000, 0.0000702000, 0.0000410000, 0.0000505000, 0.0000499000, 0.0000171000, 0.0000375000, 0.0000217000, 0.0000169000, 0.0000171000, 0.0000105000, 0.0000135000, 0.0000109000, 0.0000111000, 0.0000087000, 0.0000070300, 0.0000073600, 0.0000079200, 0.0000083100, 0.0000052800, 0.0000056000, 0.0000028000, 0.0000065900, 0.0000042500, 0.0000035300, 0.0000030600, 0.0000072300, 0.0000035800},
            {0.0004218940, 0.0003782790, 0.0002650280, 0.0001822400, 0.0001696430, 0.0001209200, 0.0000879000, 0.0000844000, 0.0000620000, 0.0000460000, 0.0000345000, 0.0000340000, 0.0000254000, 0.0000252000, 0.0000250000, 0.0000195000, 0.0000151000, 0.0000117000, 0.0000158000, 0.0000123000, 0.0000058400, 0.0000077100, 0.0000104000, 0.0000065400, 0.0000088700, 0.0000054800, 0.0000075700, 0.0000037500, 0.0000088200, 0.0000055300, 0.0000046600, 0.0000038700, 0.0000055100, 0.0000028000, 0.0000023200},
            {0.0003607340, 0.0003332590, 0.0002275480, 0.0001201950, 0.0001475640, 0.0001409400, 0.0000783000, 0.0000564000, 0.0000557000, 0.0000689000, 0.0000514000, 0.0000388000, 0.0000292000, 0.0000291000, 0.0000224000, 0.0000223000, 0.0000131000, 0.0000177000, 0.0000175000, 0.0000140000, 0.0000085300, 0.0000087800, 0.0000069000, 0.0000094600, 0.0000045900, 0.0000048000, 0.0000039100, 0.0000053700, 0.0000034100, 0.0000047400, 0.0000039200, 0.0000055900, 0.0000046400, 0.0000038400, 0.0000025900}
    };

    /**
     * A position offset parameter for the Neck integral, parameterized by two input atomic radii
     * sizes (in Angstroms).
     * <p>
     * Bij is a (non-symmetric) 35x35 array of parameterized constants last updated 02 Feb 22 by Rae
     * Corrigan.
     * <p>
     * The units of the Bij matrix are Angstroms.
     */
    private static final double[][] Bij = {
            {-1.20, -1.05, -1.30, -1.15, -1.00, -0.85, -0.90, -0.75, -1.20, -1.05, -0.90, -0.95, -0.80, -0.65, -0.70, -0.75, -0.60, -0.45, -0.50, -0.75, -0.40, -0.25, -0.30, -0.15, -0.20, -0.25, 0.10, 0.05, 0.20, -0.05, 0.30, 0.25, 0.40, 0.15, 0.10},
            {-1.25, -1.10, -0.95, -1.40, -1.05, -1.10, -0.95, -0.80, -0.85, -0.70, -0.55, -1.00, -0.65, -0.70, -0.95, -0.60, -0.65, -0.70, -0.55, -0.60, -0.45, -0.10, -0.15, 0.00, -0.05, 0.10, 0.05, 0.20, 0.15, 0.10, 0.25, 0.00, 0.15, -0.10, 0.25},
            {-1.30, -1.15, -1.00, -1.05, -0.90, -0.95, -1.20, -0.85, -0.90, -0.95, -0.80, -0.65, -0.70, -0.75, -0.40, -0.65, -0.30, -0.35, -0.60, -0.45, -0.50, -0.35, -0.20, -0.25, -0.10, 0.05, 0.00, 0.15, -0.10, 0.25, 0.00, 0.35, 0.10, 0.45, 0.40},
            {-1.15, -1.40, -1.05, -0.90, -1.15, -0.80, -1.05, -0.90, -0.95, -0.60, -0.85, -0.70, -0.75, -0.40, -0.45, -0.30, -0.35, -0.40, -0.25, -0.30, -0.15, -0.40, -0.05, -0.30, -0.15, -0.20, -0.05, 0.10, 0.25, 0.00, 0.35, 0.10, 0.25, 0.20, 0.35},
            {-1.00, -1.25, -0.90, -1.15, -1.00, -0.85, -0.90, -0.75, -0.60, -0.85, -0.50, -0.95, -0.80, -0.65, -0.70, -0.55, -0.60, -0.25, -0.50, -0.35, -0.40, -0.05, -0.10, 0.05, -0.20, 0.15, -0.10, 0.05, 0.00, 0.15, 0.10, 0.25, 0.40, 0.35, 0.50},
            {-0.85, -1.10, -1.15, -1.00, -0.85, -0.90, -0.95, -0.80, -0.65, -0.50, -0.55, -0.60, -0.65, -0.50, -0.55, -0.40, -0.25, -0.50, -0.15, -0.60, -0.05, -0.30, -0.15, 0.00, -0.05, 0.10, 0.05, 0.20, 0.15, 0.30, 0.05, 0.40, 0.35, 0.50, 0.45},
            {-0.90, -1.15, -1.00, -1.05, -0.90, -0.55, -0.60, -0.45, -0.70, -0.55, -0.60, -0.65, -0.50, -0.35, -0.40, -0.25, -0.50, -0.35, -0.20, -0.05, -0.10, 0.05, 0.00, 0.15, 0.30, 0.25, 0.40, 0.15, 0.30, -0.15, 0.40, 0.55, 0.50, 0.25, 0.60},
            {-1.15, -1.00, -1.25, -0.90, -0.75, -0.80, -0.45, -0.50, -0.95, -0.40, -0.45, -0.70, -0.55, -0.40, -0.45, -0.30, -0.15, -0.20, -0.45, -0.10, -0.15, -0.20, -0.05, 0.10, 0.05, 0.20, 0.15, 0.10, 0.05, 0.40, 0.35, 0.50, 0.45, 0.20, 0.55},
            {-1.00, -0.85, -0.90, -0.75, -0.80, -0.85, -0.90, -0.55, -0.60, -0.45, -0.50, -0.35, -0.40, -0.65, -0.30, -0.35, 0.00, -0.25, 0.10, -0.35, 0.00, -0.05, -0.10, 0.05, 0.00, 0.15, 0.10, 0.25, 0.20, 0.15, 0.30, 0.45, 0.00, 0.55, 0.70},
            {-1.05, -1.10, -0.75, -0.60, -0.65, -0.70, -0.95, -0.60, -0.45, -0.70, -0.55, -0.20, -0.45, -0.30, -0.35, -0.20, -0.25, -0.10, 0.05, 0.00, -0.05, 0.30, 0.25, 0.00, 0.15, 0.10, 0.25, 0.20, 0.55, 0.50, 0.45, 0.20, 0.75, 0.30, 0.85},
            {-1.10, -0.75, -0.80, -0.65, -0.50, -0.75, -0.60, -0.45, -0.70, -0.55, -0.40, -0.65, -0.30, -0.15, -0.20, -0.25, -0.30, -0.15, -0.20, -0.05, -0.10, 0.05, 0.20, 0.15, 0.30, 0.05, 0.20, 0.55, 0.30, 0.45, 0.40, 0.55, 0.50, 0.65, 0.60},
            {-0.75, -1.00, -0.65, -0.50, -0.75, -0.60, -0.65, -0.30, -0.35, -0.20, -0.65, -0.50, -0.55, -0.20, -0.05, 0.10, -0.15, -0.20, -0.25, -0.10, -0.15, 0.00, 0.15, 0.10, 0.25, 0.20, 0.35, 0.30, 0.25, 0.40, 0.55, 0.70, 0.45, 0.60, 0.55},
            {-0.80, -0.65, -0.70, -0.75, -0.60, -0.65, -0.50, -0.55, -0.40, -0.65, -0.30, -0.55, -0.40, -0.45, -0.10, -0.35, 0.00, 0.15, 0.10, 0.05, -0.20, 0.35, -0.10, 0.05, 0.20, 0.35, 0.50, 0.45, 0.40, 0.75, 0.50, 0.85, 0.60, 0.55, 0.70},
            {-0.85, -0.70, -0.95, -0.60, -0.85, -0.50, -0.75, -0.40, -0.25, -0.30, -0.15, -0.20, -0.25, -0.10, 0.05, -0.20, -0.05, 0.10, 0.05, -0.40, 0.35, 0.30, 0.45, 0.20, -0.05, 0.10, 0.25, 0.40, 0.35, 0.50, 0.65, 1.00, 0.75, 0.90, 0.65},
            {-0.70, -0.95, -0.60, -0.65, -0.50, -0.55, -0.40, -0.25, -0.30, -0.15, -0.20, -0.05, -0.30, 0.05, 0.20, -0.05, -0.30, 0.05, 0.00, 0.15, 0.10, 0.25, 0.20, 0.35, 0.10, 0.45, 0.60, 0.55, 0.50, 0.25, 0.20, 0.55, 0.70, 0.85, 0.80},
            {-0.35, -0.80, -0.45, -0.50, -0.35, -0.40, -0.25, -0.50, -0.15, -0.20, -0.05, -0.50, -0.15, -0.40, -0.05, -0.10, 0.25, 0.20, 0.15, 0.10, 0.25, 0.20, 0.35, 0.30, 0.45, 0.40, 0.35, 0.70, 0.65, 0.40, 0.75, 0.50, 0.65, 0.60, 0.95},
            {-0.40, -0.45, -0.50, -0.35, -0.60, -0.45, -0.50, -0.15, 0.00, -0.25, -0.30, -0.15, -0.40, -0.05, 0.10, 0.25, 0.40, 0.15, 0.10, 0.05, 0.40, -0.05, 0.10, 0.25, 0.40, 0.35, 0.50, 0.45, 0.60, 0.75, 0.90, 0.85, 0.60, 0.95, 0.70},
            {-0.45, -0.30, -0.35, -0.40, -0.25, -0.10, -0.35, -0.20, -0.25, -0.30, -0.15, 0.00, -0.05, 0.10, 0.25, 0.20, 0.15, 0.30, 0.05, 0.20, 0.35, 0.50, 0.65, 0.20, 0.55, 0.50, 0.85, 0.40, 0.75, 0.50, 0.65, 0.60, 0.75, 0.90, 1.05},
            {-0.30, -0.35, -0.40, -0.45, -0.30, -0.35, -0.20, -0.45, -0.10, 0.05, 0.20, -0.05, -0.10, -0.15, 0.20, 0.15, 0.10, 0.05, 0.60, 0.35, 0.50, 0.25, 0.40, 0.55, 0.70, 0.65, 0.80, 0.55, 0.70, 1.05, 1.00, 0.55, 0.90, 1.05, 1.20},
            {-0.55, -0.40, -0.65, -0.30, -0.35, -0.20, -0.25, -0.10, -0.35, 0.00, -0.05, 0.10, 0.05, 0.00, -0.25, 0.30, 0.25, 0.20, 0.35, -0.10, 0.25, 0.40, 0.55, 0.70, 0.65, 0.60, 0.75, 0.90, 0.65, 0.40, 0.95, 0.70, 1.05, 1.00, 1.15},
            {-0.40, -0.45, -0.70, -0.15, -0.20, -0.05, 0.10, -0.35, 0.00, 0.15, -0.10, 0.25, 0.00, 0.35, 0.30, 0.25, 0.20, 0.55, 0.50, 0.45, 0.20, 0.75, 0.50, 0.65, 0.60, 0.75, 0.50, 0.85, 0.80, 0.95, 1.10, 1.05, 1.00, 1.15, 1.10},
            {-0.25, -0.10, -0.15, -0.40, -0.45, -0.30, 0.05, -0.20, 0.15, 0.10, 0.05, 0.00, 0.35, 0.10, 0.45, 0.20, 0.35, 0.10, 0.25, 0.40, 0.55, 0.30, 0.65, 0.20, 0.35, 0.30, 0.65, 0.60, 0.75, 0.90, 0.85, 1.00, 0.95, 1.30, 1.05},
            {-0.30, -0.15, -0.20, -0.25, 0.10, -0.35, -0.20, 0.15, -0.10, 0.05, 0.40, 0.15, 0.10, 0.45, 0.00, 0.35, 0.10, 0.45, 0.60, 0.55, 0.50, 0.65, 0.20, 0.35, 0.90, 0.45, 0.60, 0.35, 0.90, 0.65, 0.60, 0.95, 1.10, 1.25, 1.00},
            {-0.15, -0.20, -0.05, -0.10, -0.15, -0.40, -0.05, 0.10, 0.05, 0.00, 0.15, 0.30, 0.25, 0.20, 0.55, 0.50, 0.45, 0.20, 0.15, 0.70, 0.45, 0.60, 0.35, 0.90, 0.65, 0.80, 0.55, 0.50, 0.45, 0.80, 0.95, 0.90, 1.05, 1.00, 0.95},
            {0.00, -0.25, -0.10, -0.15, 0.00, -0.05, -0.10, 0.05, 0.00, 0.15, 0.30, 0.25, 0.20, 0.15, 0.50, 0.45, 0.20, 0.35, 0.70, 0.45, 0.40, 0.35, 0.70, 0.65, 0.80, 0.75, 0.90, 0.65, 1.00, 0.95, 1.30, 1.25, 1.00, 1.35, 0.90},
            {-0.25, -0.10, -0.15, 0.00, 0.15, 0.10, -0.15, 0.20, 0.15, 0.10, 0.05, 0.40, 0.35, 0.50, 0.05, 0.00, 0.35, 0.50, 0.25, 0.60, 0.35, 0.50, 0.65, 1.00, 0.95, 0.90, 0.85, 0.80, 1.15, 1.10, 1.25, 1.40, 1.15, 0.90, 1.05},
            {-0.10, -0.15, 0.00, -0.05, 0.10, -0.15, 0.00, 0.35, 0.30, 0.05, 0.20, 0.55, 0.30, 0.65, 0.60, 0.15, 0.50, 0.25, 0.60, 0.55, 0.90, 0.85, 0.60, 0.55, 0.70, 1.05, 0.80, 0.95, 0.90, 1.05, 1.00, 1.15, 1.30, 1.25, 1.20},
            {0.05, 0.00, 0.15, 0.10, -0.15, 0.20, 0.35, 0.10, 0.45, 0.20, 0.15, 0.30, 0.05, 0.40, 0.15, 0.70, 0.45, 0.40, 0.75, 0.50, 0.85, 0.60, 0.75, 0.90, 1.05, 1.20, 1.15, 0.90, 1.25, 1.00, 0.95, 1.10, 1.25, 1.00, 1.15},
            {0.20, 0.15, -0.10, -0.15, 0.00, 0.15, 0.10, 0.45, 0.20, 0.35, 0.10, 0.45, 0.40, 0.35, 0.30, 0.65, 0.40, 0.35, 0.70, 0.85, 0.60, 0.55, 0.50, 0.85, 1.20, 0.95, 0.50, 0.85, 1.20, 1.35, 0.90, 1.05, 1.40, 1.35, 1.50},
            {0.15, 0.10, 0.05, 0.00, 0.15, 0.10, 0.25, 0.60, 0.35, 0.30, 0.05, 0.60, 0.55, 0.30, 0.25, 0.40, 0.55, 0.50, 0.85, 0.40, 0.75, 1.10, 1.05, 0.40, 0.95, 0.70, 0.85, 1.00, 0.95, 1.30, 1.05, 1.40, 1.35, 1.70, 1.45},
            {0.10, 0.05, 0.00, 0.15, 0.10, 0.25, 0.20, 0.35, 0.10, 0.45, 0.60, 0.55, 0.10, 0.65, 0.80, 0.75, 0.30, 0.65, 0.40, 0.75, 1.10, 0.85, 0.40, 0.75, 0.70, 0.85, 1.20, 0.95, 1.30, 1.25, 1.40, 0.95, 1.50, 0.85, 1.60},
            {0.05, 0.20, 0.15, 0.30, 0.25, 0.40, 0.35, 0.50, 0.65, 0.20, 0.55, 0.30, 0.45, 0.40, 0.55, 0.90, 0.85, 0.40, 0.55, 0.90, 0.65, 0.80, 0.95, 1.10, 1.45, 1.40, 0.95, 1.10, 1.05, 1.00, 1.35, 1.30, 1.05, 1.40, 1.75},
            {0.20, 0.15, 0.30, 0.25, 0.40, 0.35, 0.30, 0.25, 0.60, 0.35, 0.70, 0.85, 0.20, 0.95, 0.70, 0.65, 0.80, 0.55, 0.90, 0.85, 1.00, 0.95, 0.90, 1.05, 1.20, 1.35, 1.10, 1.25, 0.80, 1.55, 1.30, 1.25, 1.20, 1.95, 1.50},
            {0.35, 0.50, 0.45, 0.40, 0.55, 0.50, 0.45, 0.60, 0.55, 0.50, 0.45, 0.60, 0.55, 0.70, 0.85, 0.80, 0.75, 0.70, 1.05, 1.00, 0.55, 0.90, 1.25, 1.00, 1.35, 1.10, 1.45, 1.00, 1.75, 1.50, 1.45, 1.40, 1.75, 1.30, 1.25},
            {0.30, 0.45, 0.40, 0.15, 0.50, 0.65, 0.40, 0.35, 0.50, 0.85, 0.80, 0.75, 0.70, 0.85, 0.80, 0.95, 0.70, 1.05, 1.20, 1.15, 0.90, 1.05, 1.00, 1.35, 0.90, 1.05, 1.00, 1.35, 1.10, 1.45, 1.40, 1.75, 1.70, 1.65, 1.40}
    };

    public static double[] getNeckConstants(double rhoDescreened, double rhoDescreening) {

        // Determine low and high values for integration
        int[] boundsI = getBounds(rhoDescreened);
        int[] boundsJ = getBounds(rhoDescreening);

        int lowI = boundsI[0];
        int highI = boundsI[1];
        int lowJ = boundsJ[0];
        int highJ = boundsJ[1];

        // Interpolate/Extrapolate Aij and Bij constant values
        double aij = interpolate2D(radArray[lowI], radArray[highI], radArray[lowJ], radArray[highJ],
                rhoDescreened, rhoDescreening, Aij[lowI][lowJ], Aij[highI][lowJ], Aij[lowI][highJ],
                Aij[highI][highJ]);
        double bij = interpolate2D(radArray[lowI], radArray[highI], radArray[lowJ], radArray[highJ],
                rhoDescreened, rhoDescreening, Bij[lowI][lowJ], Bij[highI][lowJ], Bij[lowI][highJ],
                Bij[highI][highJ]);

        // Never let Aij be negative.
        if (aij < 0.0) {
            logger.warning(
                    format(" Aij is less than zero in NeckIntegral for radii: %16.8f %16.8f.", rhoDescreened,
                            rhoDescreening));
            aij = 0.0;
        }

        return new double[]{aij, bij};
    }

    private static double interpolate1D(double y1, double y2, double y, double fxy1, double fxy2) {
        double frac1 = (y2 - y) / (y2 - y1);
        double frac2 = (y - y1) / (y2 - y1);
        double product1 = frac1 * fxy1;
        double product2 = frac2 * fxy2;
        return product1 + product2;
    }

    private static double interpolate2D(double x1, double x2, double y1, double y2, double x, double y,
                                        double fx1y1, double fx2y1, double fx1y2, double fx2y2) {
        double fxy1 = (x2 - x) / (x2 - x1) * fx1y1 + (x - x1) / (x2 - x1) * fx2y1;
        double fxy2 = (x2 - x) / (x2 - x1) * fx1y2 + (x - x1) / (x2 - x1) * fx2y2;

        return (y2 - y) / (y2 - y1) * fxy1 + (y - y1) / (y2 - y1) * fxy2;
    }

    // Aij AO: 0.0000947808
    private static final double[][] AijOrig = {
            {0.0000947808, 0.0001137020, 0.0001001180, 0.0001195900, 0.0001050630, 0.0000922010,
                    0.0001099390, 0.0000961817, 0.0001143420, 0.0000999772, 0.0001184650, 0.0001035490,
                    0.0001227270},
            {0.0000789821, 0.0000948444, 0.0000836245, 0.0000733297, 0.0000878314, 0.0000769799,
                    0.0000919335, 0.0000804789, 0.0000958057, 0.0000839558, 0.0000997966, 0.0000870743,
                    0.0001031750},
            {0.0000665366, 0.0000799715, 0.0000703720, 0.0000842561, 0.0000740921, 0.0000649757,
                    0.0000775663, 0.0000681323, 0.0000811720, 0.0000708781, 0.0000842888, 0.0000735226,
                    0.0000872208},
            {0.0000560640, 0.0000673256, 0.0000593409, 0.0000523516, 0.0000625504, 0.0000549136,
                    0.0000656357, 0.0000782465, 0.0000685443, 0.0000599304, 0.0000712967, 0.0000622049,
                    0.0000738641},
            {0.0000476864, 0.0000573346, 0.0000505739, 0.0000606430, 0.0000534346, 0.0000638940,
                    0.0000560721, 0.0000668434, 0.0000585494, 0.0000511473, 0.0000608988, 0.0000531489,
                    0.0000632062},
            {0.0000406501, 0.0000489724, 0.0000432430, 0.0000519647, 0.0000456150, 0.0000545524,
                    0.0000478982, 0.0000571349, 0.0000500254, 0.0000437652, 0.0000521263, 0.0000455330,
                    0.0000540793},
            {0.0000349541, 0.0000421574, 0.0000370920, 0.0000445857, 0.0000391597, 0.0000469342,
                    0.0000411581, 0.0000491397, 0.0000430438, 0.0000512731, 0.0000448652, 0.0000392138,
                    0.0000466779},
            {0.0000411296, 0.0000362900, 0.0000319527, 0.0000384631, 0.0000337429, 0.0000404799,
                    0.0000355183, 0.0000424310, 0.0000371662, 0.0000443414, 0.0000388286, 0.0000461746,
                    0.0000403668},
            {0.0000355236, 0.0000313722, 0.0000276089, 0.0000332680, 0.0000292288, 0.0000350426,
                    0.0000307676, 0.0000367966, 0.0000323063, 0.0000385546, 0.0000337092, 0.0000400815,
                    0.0000350018},
            {0.0000309168, 0.0000272940, 0.0000240680, 0.0000289772, 0.0000254577, 0.0000305399,
                    0.0000268793, 0.0000321616, 0.0000281553, 0.0000336062, 0.0000294027, 0.0000349824,
                    0.0000305618},
            {0.0000269536, 0.0000237946, 0.0000287199, 0.0000252553, 0.0000222642, 0.0000266807,
                    0.0000234688, 0.0000280674, 0.0000245787, 0.0000293847, 0.0000256658, 0.0000305777,
                    0.0000267274},
            {0.0000236280, 0.0000208424, 0.0000251832, 0.0000221566, 0.0000195124, 0.0000234327,
                    0.0000205702, 0.0000246477, 0.0000215557, 0.0000257936, 0.0000225548, 0.0000268717,
                    0.0000234796},
            {0.0000207603, 0.0000182939, 0.0000161523, 0.0000195050, 0.0000234519, 0.0000206073,
                    0.0000180540, 0.0000216798, 0.0000189606, 0.0000226817, 0.0000198338, 0.0000236529,
                    0.0000206561}
    };

    // Bij AO: 0.00
    private static final double[][] BijOrig = {
            {0.00, 0.15, 0.10, 0.25, 0.20, 0.15, 0.30, 0.25, 0.40, 0.35, 0.50, 0.45, 0.60},
            {0.05, 0.20, 0.15, 0.10, 0.25, 0.20, 0.35, 0.30, 0.45, 0.40, 0.55, 0.50, 0.65},
            {0.10, 0.25, 0.20, 0.35, 0.30, 0.25, 0.40, 0.35, 0.50, 0.45, 0.60, 0.55, 0.70},
            {0.15, 0.30, 0.25, 0.20, 0.35, 0.30, 0.45, 0.60, 0.55, 0.50, 0.65, 0.60, 0.75},
            {0.20, 0.35, 0.30, 0.45, 0.40, 0.55, 0.50, 0.65, 0.60, 0.55, 0.70, 0.65, 0.80},
            {0.25, 0.40, 0.35, 0.50, 0.45, 0.60, 0.55, 0.70, 0.65, 0.60, 0.75, 0.70, 0.85},
            {0.30, 0.45, 0.40, 0.55, 0.50, 0.65, 0.60, 0.75, 0.70, 0.85, 0.80, 0.75, 0.90},
            {0.55, 0.50, 0.45, 0.60, 0.55, 0.70, 0.65, 0.80, 0.75, 0.90, 0.85, 1.00, 0.95},
            {0.60, 0.55, 0.50, 0.65, 0.60, 0.75, 0.70, 0.85, 0.80, 0.95, 0.90, 1.05, 1.00},
            {0.65, 0.60, 0.55, 0.70, 0.65, 0.80, 0.75, 0.90, 0.85, 1.00, 0.95, 1.10, 1.05},
            {0.70, 0.65, 0.80, 0.75, 0.70, 0.85, 0.80, 0.95, 0.90, 1.05, 1.00, 1.15, 1.10},
            {0.75, 0.70, 0.85, 0.80, 0.75, 0.90, 0.85, 1.00, 0.95, 1.10, 1.05, 1.20, 1.15},
            {0.80, 0.75, 0.70, 0.85, 1.00, 0.95, 0.90, 1.05, 1.00, 1.15, 1.10, 1.25, 1.20}
    };

}
