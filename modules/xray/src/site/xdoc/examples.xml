<?xml version="1.0" encoding="UTF-8" ?>
<document
    xmlns="http://maven.apache.org/XDOC/2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Xray Module Usage</title>
        <author email="fenn@stanford.edu">Timothy D. Fenn</author>
    </properties>
    <body>
        <section name="X-Ray Examples">
            <subsection name="Prior to using the X-Ray interface">
                <p>In order to use the X-Ray interface, X-ray reflection data
                must be provided along with an atomic model. Currently accepted
                formats include:
                </p>
                <ul>
                    <li>CCP4 MTZ format (preferred)</li>
                    <li>CIF format</li>
                    <li>CNS format</li>
                </ul>
                <p>If you are using the CIF format, the reflection file should
                contain the following header information:
                </p>
                <ul>
                    <li>symmetry.Int_Tables_number or symmetry.space_group_name_H-M</li>
                    <li>cell.length_a, length_b, length_c, angle_alpha, angle_beta, angle_gamma</li>
                    <li>reflns.d_resolution_high</li>
                    <li>refln.status (for Rfree), F_meas_au and F_meas_sigma_au</li>
                </ul>
                <p>Alternatively, if you are using a CNS file, the reflection
                file should have a
                    <source>{sg=P6(1) a=102.1 b=...}</source> header,
                and the resolution information can be provided in a property
                file.
                </p>
                <p>Any of the data information (resolution, Rfree integer flag,
                cell lengths/angles) can be overwritten by providing a property
                file.
                </p>
            </subsection>
            <subsection name="File names/extensions">
                <p>The atomic coordinates are best provided as a PDB file for
                the purposes of X-ray usage (as B-factors and occupancies are
                necessary/relevant). If the coordinates are provided in
                filename.pdb, then an optional property file can be provided as
                filename.key or filename.properties. This property file can
                contain crystal information, force field and/or refinement
                options. For example:
                </p>
                <source>
a-axis 39.767
b-axis 51.750
c-axis 132.938
alpha 90.00
beta 90.00
gamma 90.00
spacegroup P212121
resolution 1.7
rfreeflag 1
                </source>
                <p>Which will override any information acquired from the PDB
                file or reflection file.
                </p>
                <p>For the X-ray refinement scripts, reflection files can be
                provided on the command line. If only a coordinate file name is
                provided, then the program will search for valid reflection
                files using the base filename. In the example above, this would
                result in the program searching for filename.mtz, filename.ent/cif/sf
                and finally filename.cns/hkl.
                </p>
            </subsection>
            <subsection name="Scaling data/fitting sigmaA parameters/MTZ output">
                <p>The
                    <a href="http://kenai.com/projects/ffx/sources/source/content/modules/xray/src/main/groovy/ffx/xray/scaleBulk.groovy">xray.scaleBulk</a>
                script will perform anisotropic scaling,
                fit a bulk solvent and compute crystallographic statistics (such
                as R/Rfree) and write out a MTZ file, without modifying the input
                coordinates, other than adding hydrogens (if necessary). Here is
                the output from 2R4R:
                </p>
                <source>
  Fc to Fo scale: 0.56
  Fc to Fo spline scale: 1.07 0.88 0.95 1.00 1.01 1.04 1.03 1.00 0.99 0.96
  aniso B tensor:
    -20.7258 0.00000 6.04607
    0.00000 34.6983 0.00000
    6.04607 0.00000 1.82392
  bulk solvent model: polynomial switch
  bulk solvent a: 0.00000 w: 0.800000
  bulk solvent scale: 0.440275  B: 106.995
  -log likelihood: 18883.5 (free set: 2371.35)

Blow DPI (eqn 7):  0.4694 nonH atoms:  0.6628
Cruickshank DPI (eqn 27):  0.4775 nonH atoms:  0.6742
Acta Cryst (1999) D55, 583-601 and Acta Cryst (2002) D58, 792-797

# reflections (for 100% complete): 19906
     res. range | #HKL (R)|#HKL (cv)|    #bin |   #miss |%complete
 85.923   7.475 |    1754 |     216 |    1970 |      20 | 98.99
  7.473   5.886 |    1786 |     201 |    1987 |       4 | 99.80
  5.886   5.125 |    1801 |     183 |    1984 |       5 | 99.75
  5.124   4.643 |    1812 |     176 |    1988 |       1 | 99.95
  4.643   4.303 |    1786 |     203 |    1989 |       5 | 99.75
  4.303   4.041 |    1778 |     202 |    1980 |      12 | 99.40
  4.041   3.838 |    1785 |     187 |    1972 |      20 | 99.00
  3.838   3.668 |    1790 |     177 |    1967 |      25 | 98.74
  3.668   3.524 |    1770 |     168 |    1938 |      46 | 97.68
  3.524   3.400 |    1692 |     204 |    1896 |      97 | 95.13
 85.923   3.400 |   17754 |    1917 |   19671 |     235 | 98.82

     res. range |   signal |    sigma |      s/n
 85.923   7.475 |   441.80 |    10.74 |    43.62
  7.473   5.886 |   271.55 |    11.56 |    28.46
  5.886   5.125 |   286.52 |    15.06 |    23.59
  5.124   4.643 |   315.70 |    16.80 |    22.69
  4.643   4.303 |   296.68 |    18.65 |    19.82
  4.303   4.041 |   257.25 |    21.41 |    15.34
  4.041   3.838 |   207.39 |    25.19 |    10.32
  3.838   3.668 |   183.12 |    27.91 |     7.95
  3.668   3.524 |   162.23 |    30.25 |     6.23
  3.524   3.400 |   146.64 |    33.67 |     4.97
 85.923   3.400 |   258.28 |    20.80 |    18.39

s and w are analagous to D and sum_wc - J. Appl. Cryst. (2005) 38, 193-198

     res. range |       R |   Rfree |       s |    w(E) |    w(F) |     FOM
 85.923   7.475 |   30.38 |   34.84 |  0.8436 |  0.2767 |  102.09 |  0.7142
  7.473   5.886 |   22.53 |   27.91 |  0.8877 |  0.1970 |   43.06 |  0.7984
  5.886   5.125 |   22.27 |   28.63 |  0.9093 |  0.2577 |   59.00 |  0.7610
  5.124   4.643 |   17.59 |   22.31 |  0.9349 |  0.1406 |   35.53 |  0.8456
  4.643   4.303 |   18.55 |   25.56 |  0.9255 |  0.1858 |   44.23 |  0.8104
  4.303   4.041 |   19.65 |   24.96 |  0.9212 |  0.1970 |   40.53 |  0.7930
  4.041   3.838 |   20.37 |   24.56 |  0.9297 |  0.1642 |   27.38 |  0.8280
  3.838   3.668 |   22.52 |   26.61 |  0.8813 |  0.1709 |   24.83 |  0.8156
  3.668   3.524 |   23.58 |   26.49 |  0.8607 |  0.1773 |   22.55 |  0.8098
  3.524   3.400 |   28.58 |   32.32 |  0.8550 |  0.2956 |   33.27 |  0.7213
 85.923   3.400 |   22.68 |   27.94 |  0.8952 |  0.2059 |   43.32 |  0.7900
                </source>
                <p>This output provides all the scaling values, data statistics
                and model-versus-data statistics required to carry out a quick
                analysis of a structure. The output MTZ file contains Fourier
                coefficients (Fo-Fc and 2Fo-Fc) that can be auto-opened for
                inspection in coot, along with other useful coefficients (bulk
                solvent and Fc coefficients, sigmaA, FOM, etc).
                </p>
            </subsection>
            <subsection name="X-Ray refinement">
                <p>The refinement engine in FFX is set up to be dynamic.
                Refinement can include simulated annealing, refine coordinates
                only, B factors only, occupancies, all three, etc. Example
                scripts to refine an X-ray structure are provided, although we
                encourage users to edit and modify the scripts as required for
                their task.
                </p>
                <p>For example, to carry out simulated annealing followed by
                coordinate and then B-factor refinement, the provided
                <a href="http://kenai.com/projects/ffx/sources/source/content/modules/xray/src/main/groovy/ffx/xray/annealMinimize.groovy">xray.annealMinimize</a>
                script should suffice. The job can be run
                by providing the atomic coordinates and structure factors:
                </p>
                <source>ffxc xray.annealMinimize 1N7S.pdb 1N7S.mtz</source>
                <p>The xray.annealMinimize script is provided in the scripts
                directory, which partly contains:
                </p>
                <source>
// Name of the file (PDB or XYZ).
String modelfilename = args[0];

// input MTZ/CIF/CNS data (optional - if not given, data must be present as pdbfilename.[mtz/cif/ent/cns])
String datafilename = args[1];

// data weight
double wA = 1.0;

// is this neutron data?
boolean neutron = false;

// Set the RMS gradient per atom convergence criteria (optional)
String coordepsString = args[2];

// same, but for B factors
String bepsString = args[3];

// set the maximum number of refinement cycles
int maxiter = 50000;

// simulated annealing settings:
// type of simulated annealing refinement
RefinementMode refinementmode = RefinementMode.COORDINATES_AND_BFACTORS;
// starting temp
double highTemperature = 1000.0;
// ending temp
double lowTemperature = 100.0;
// number of steps to take between high and low temps
int annealingSteps = 10;
// number of MD steps at each annealing step
int mdSteps = 200;
                </source>
                <p>So four options can be provided on the command line: the
                input coordinates (the first argument), the input structure
                factors (the second argument), the coordinate optimization
                desired (the third) and B optimization desired (the fourth).
                However, only the input coordinates are absolutely required to
                run the script, the remainder have default values the program
                will try to use if they are not provided. Within the script
                itself, a number of additional options can be set, such as the
                type of refinement, weight of the data and simulated annealing
                parameters.  As mentioned above, these values can be modified
                as needed by the user, and we encourage you to do so!
                </p>
            </subsection>
            <subsection name="Properties associated with Diffraction data">
                <p>As mentioned above, the property file can contain several options
                that are specific to the diffraction data.  The available options
                are (with defaults given in parentheses):
                </p>
                <ol>
                    <li>fostring (null): title of Fo column in input MTZ file
                    (FFX has several default strings it will search for, such as
                    F, FO, FP or FOBS)
                    </li>
                    <li>sigfostring (null): title of sigFo column in input MTZ
                    file
                    </li>
                    <li>rfreestring (null): title of input RFree column in input
                    MTZ file
                    </li>
                    <li>use_3g (true): uses 3 Gaussians in form factor equation
                    rather than 6 (set to false for atomic resolution data
                    sets)
                    </li>
                    <li>aradbuff (0.5): atom radius buffer for sampling grid
                    density, added to dynamically determined radius
                    </li>
                    <li>splinefit (true): resolution dependent spline fit
                    between Fo and Fc
                    </li>
                    <li>fsigfcutoff (-1.0): F/sigF cutoff</li>
                    <li>resolution (-1.0): resolution cutoff of the data (by
                    default, FFX will read in all data)
                    </li>
                    <li>rfreeflag (-1): integer flag for Rfree reflections (if
                    -1, it will be automatically determined from the data
                    </li>
                    <li>nbins (10): number of bins to divide data for purposes
                    of statistics
                    </li>
                    <li>gridsearch (false): grid bulk solvent parameters to
                    determine optimal starting values
                    </li>
                    <li>xrayscaletol (1.0E-4): gradient rms tolerance during
                    scaling
                    </li>
                    <li>sigmaatol (1.0): gradient rms tolerance during sigmaA
                    fit
                    </li>
                    <li>xweight (1.0): weight for summed diffraction data
                    (weights for individual data sets are provided at the
                    script level)
                    </li>
                    <li>bsimweight (1.0): harmonic restraint B-factor weight
                    between bonded atoms (increase to 5 or 10 for low resolution
                    structures if need be)
                    </li>
                    <li>bnonzeroweight (1.0): statistical mechanics based weight
                    to prevent nonzero B factors
                    </li>
                    <li>bmass (5.0): fictitious mass to assign to B factors
                    for extended Lagrangian methods
                    </li>
                    <li>residuebfactor (false): refine a B factor for each
                    residue
                    </li>
                    <li>nresiduebfactor (1): number of residues per B factor
                    (requires residuebfactor to be true)
                    </li>
                    <li>addanisou (false): add ANISOU records to the PDB
                    file based on B factors
                    </li>
                    <li>refinemolocc (false): refine occupancies of HETATMs,
                    only performed if hetatms are in alternate conformers or
                    occ &lt; 1.0
                    </li>
                    <li>occmass (10.0): fictitious mass to assign to occupancies
                    for extended Lagrangian methods
                    </li>
                </ol>
                <p>Other options are available, such as spacegroup and cell
                settings, but these apply to the chemistry and diffraction terms
                and are described elsewhere.
                </p>
            </subsection>
            <subsection name="Scripts relevant to diffraction data">
                <p>As mentioned, several scripts are provided for use.  They
                can be found here:
                <a href="http://kenai.com/projects/ffx/sources/source/show/modules/xray/src/main/groovy/ffx">included diffraction data scripts</a>
                And consists of:</p>
                <ol>
                    <li>cif2mtz: converts a cif to an mtz file with symmetry
                    information gathered from a PDB file</li>
                    <li>deuterate: replaces hydrogen atoms with deuterium (only
                    if bonded to N, O or S) and water with deuterium water
                    for the purposes of neutron refinement</li>
                    <li>mtzInfo: print info regarding a MTZ file</li>
                    <li>xray.annealMinimize: simulated annealing followed by
                    coordinate and B factor optimization</li>
                    <li>xray.minimize: simulatenous optimization of coordinates,
                    Bs and occupancies (the latter is done only if necessary)</li>
                    <li>xray.minimize3Stage: same as above, but split into
                    stages (recommended)</li>
                    <li>xray.minimizeNoSCF: optimization of coordinates without
                    a polarization term (fast, useful if the starting model is
                    poor)</li>
                    <li>xray.minimizeXYZ: same as xray.minimize, but only
                    optimizes coordinates</li>
                    <li>xray.minimizeB: same as xray.minimize, but only
                    optimizes B factors (atoms with ANISOU records are refined
                    anisotropically)</li>
                    <li>xray.minimizeOcc: same as xray.minimize, but only
                    optimizes occupancies</li>
                    <li>xray.scaleBulk: simply scale the model and data, then
                    print statistics and write out a MTZ file</li>
                </ol>
                <p>Similar scripts are included for neutron and real space
                refinement.</p>
            </subsection>
        </section>
    </body>
</document>
