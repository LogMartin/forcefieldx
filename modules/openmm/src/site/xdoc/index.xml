<?xml version="1.0" encoding="UTF-8" ?>
<document
        xmlns="http://maven.apache.org/XDOC/2.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Java Wrappers for the OpenMM C API Home Page</title>
        <author email="hernan-bernabe@uiowa.edu">Hernan V. Bernabe</author>
    </properties>
    <body>
        <section name="Java Wrappers for the OpenMM C API">
            <p>
                Force Field X makes use of OpenMM via Java wrappers for the OpenMM C API.
            </p>
            <p>
                The wrappers are automatically generated using Jnaerator and are available on Github in case
                they may be useful to others:
            </p>
            <p>
                <a href="https://github.com/mjschnie/openmm-java-wrappers">Java Wrappers for the OpenMM C API</a>
            </p>
            <subsection name="Environment Variables needed to use OpenMM within Force Field X">
                <p>
                    To use the OpenMM Java wrappers, two environment variables need to be set (e.g. in .bash_profile)
                    in order to invoke the OpenMM libraries from within a Java program.
                    First, the JNA_LIBRARY_PATH variable needs to point to the location of the lib
                    subdirectory of the OpenMM installation package.
                </p>
                <source>export JNA_LIBRARY_PATH="/Applications/anaconda3/pkgs/openmm-7.1.1-py36_0/lib"</source>
                <p>
                    Second, the OPENMM_PLUGIN_DIR variable needs to point to the location of the plugins subdirectory of
                    the plugins subdirectory of the OpenMM installation package. 
                </p>
                <source>export OPENMM_PLUGIN_DIR="/Applications/anaconda3/pkgs/openmm-7.1.1-py36_0/lib/plugins"</source>
            </subsection>
            <subsection name="An Example Force Field X Energy Command Calling OpenMM">
                <p>
                    There are a number of algorithms in the FFX package that can use OpenMM under the hood if the
                    "platform" flag
                    is set to OMM. An example of this can be seen below using the Energy script:
                </p>
                <source>ffxc -Dplatform=OMM Energy yourpdb.pdb</source>
                <p>
                    where yourpdb.pdb will be replaced with the name of the pdb structure you wish to run the
                    algorithm on.
                </p>
            </subsection>
        </section>
    </body>
</document>
