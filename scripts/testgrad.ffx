
import ffx.potential.PotentialEnergy;
import ffx.potential.bonded.Atom;
import ffx.potential.bonded.MolecularAssembly;

System.setProperty("pj.nt", "2");

String name = "/Data/ffx-project/other/Bruce/n1zih.xyz";
//String name = "examples/watersmall.xyz";
open(name);

Atom[] atoms = active.getAtomArray();
int n = atoms.length;
PotentialEnergy energy = active.getPotentialEnergy();

boolean gradient = true;
boolean print = true;
energy.energy(gradient, print);
double[] analytic = new double[3*n];
energy.getGradients(analytic);

gradient = false;
print = false;
double step = 0.00001;
double gradientTolerance = 1.0e4;
double[] numeric = new double[3];
double[] xyz = new double[3];

for (int i=400; i<n; i++) {
   Atom a0 = atoms[i];
   a0.getXYZ(xyz);
   // Find numeric dX
   xyz[0] += step;
   a0.moveTo(xyz);
   double e = energy.energy(gradient, print);
   xyz[0] -= 2.0 * step;
   a0.moveTo(xyz);
   e -= energy.energy(gradient, print);
   numeric[0] = e / (2.0 * step);
   xyz[0] += step;
   // Find numeric dY
   xyz[1] += step;
   a0.moveTo(xyz);
   e = energy.energy(gradient, print);
   xyz[1] -= 2.0 * step;
   a0.moveTo(xyz);
   e -= energy.energy(gradient, print);
   numeric[1] = e / (2.0 * step);
   xyz[1] += step;
   // Find numeric dZ
   xyz[2] += step;
   a0.moveTo(xyz);
   e = energy.energy(gradient, print);
   xyz[2] -= 2.0 * step;
   a0.moveTo(xyz);
   e -= energy.energy(gradient, print);
   numeric[2] = e / (2.0 * step);
   xyz[2] += step;
   a0.moveTo(xyz);
   int i3 = i*3;
   int i0 = i3 + 0;
   int i1 = i3 + 1;
   int i2 = i3 + 2;
   double dx = analytic[i0] - numeric[0];
   double dy = analytic[i1] - numeric[1];
   double dz = analytic[i2] - numeric[2];
   double len = Math.sqrt(dx * dx + dy * dy + dz * dz);
   if (len > gradientTolerance) {
      println(a0.toString() + String.format(" failed: %10.6f.", len) + String.format(
              "\nAnalytic: (%12.4f, %12.4f, %12.4f)\n",
              analytic[i0], analytic[i1], analytic[i2]) + String.format("Numeric:  (%12.4f, %12.4f, %12.4f)\n",
                                                                      numeric[0], numeric[1], numeric[2]));
      return;
   } else {
      println(a0.toString() + String.format(" passed: %10.6f.", len) + String.format(
              "\nAnalytic: (%12.4f, %12.4f, %12.4f)\n",
              analytic[i0], analytic[i1], analytic[i2]) + String.format("Numeric:  (%12.4f, %12.4f, %12.4f)\n",
                                                                      numeric[0], numeric[1], numeric[2]));
   }
}
