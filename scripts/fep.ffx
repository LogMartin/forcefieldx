
// Coordinate file to open (can be XYZ or PDB)
String fileName = "examples/watersmall.xyz";

// Restart file
File dyn = null;

// Beginning of the ligand atom range.
int ligandStart = 1;

// End of the ligand atom range.
int ligandStop = 3;

// Number of electrostatics lambda windows.
int elecWindows = 10;

// Number of soft core van der Waals lambda windows.
int vdwWindows = 10;

// Number of equilibration MD steps.
int eSteps = 100000;

// Number of MD steps per window.
int nSteps = 100000;

// Time step in femtoseconds.
double timeStep = 1.0;

// Frequency to print out thermodynamics information in picoseconds.
double printInterval = 0.01;

// Frequency to save out coordinates in picoseconds.
double saveInterval = 0.1;

// Temperature in degrees Kelvin.
double temperature = 300.0;

// Things below this line normally do not need to be modified.
// =============================================================================

import org.apache.commons.io.FilenameUtils;

import ffx.algorithms.MolecularDynamics;
import ffx.algorithms.Thermostat.Thermostats;

import ffx.potential.PotentialEnergy;
import ffx.potential.bonded.Atom;

// Open the system
open(fileName);
String lambdaName = FilenameUtils.removeExtension(fileName);

// Apply the ligand atom selection
Atom[] atoms = active.getAtomArray();
for (int i = ligandStart; i <= ligandStop; i++) {
   Atom ai = atoms[i - 1];
   ai.setApplyLambda(true);
}

// Select an availble thermostat [ BUSSI, BERENDSEN, ISOTHERMAL ]
Thermostats thermostat = Thermostats.BUSSI;

// Create a MolecularDynamics instance
MolecularDynamics molDyn = new MolecularDynamics(active, active.getProperties(), null, thermostat);

// Equilibrate the system
boolean initVelocities = true;
molDyn.dynamic(eSteps, timeStep, printInterval, -1, temperature, initVelocities, dyn);

// Retrieve the PotentialEnergy instance
PotentialEnergy energy = active.getPotentialEnergy();

// Turn off the polarizability and multipoles for the selected atoms
for (int i=0; i <= elecWindows; i++) {
   double lambda = 1.0 - (double) i / (double) elecWindows;
   energy.setElectrostaticsLambda(lambda);
   molDyn.setArchiveFile(new File(lambdaName + "_elec_" + String.format("%5.3f", lambda) + ".arc"));
   molDyn.dynamic(nSteps, timeStep, printInterval, saveInterval, temperature, initVelocities, dyn);
}

// Turn off the vdW potential for the selected atoms
for (int i=1; i <= vdwWindows; i++) {
   double lambda = 1.0 - (double) i / (double) vdwWindows;
   energy.setSoftCoreLambda(lambda);
   molDyn.setArchiveFile(new File(lambdaName + "_vdw_" + String.format("%5.3f", lambda) + ".arc"));
   molDyn.dynamic(nSteps, timeStep, printInterval, saveInterval, temperature, initVelocities, dyn);
}


