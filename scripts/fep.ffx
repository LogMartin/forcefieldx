
// Coordinate file to open (can be XYZ or PDB)
String fileName = "examples/waterbox.xyz";

// Beginning of the soft core atom range.
int softStart = 1;

// End of the soft core atom range.
int softStop = 3;

// Number of soft core Lambda windows.
int softWindows = 10;

// Number of molecular dynamics steps per window.
int nSteps = 100;

// Time step in femtoseconds.
double timeStep = 1.0;

// Frequency to print out thermodynamics information in picoseconds.
double printInterval = 0.01;

// Frequency to save out coordinates in picoseconds.
double saveInterval = 0.01;

// Temperature in degrees Kelvin.
double temperature = 300.0;

// Reset velocities.
boolean initVelocities = true;

// Things below this line normally do not need to be modified.
// ========================================================================

import org.apache.commons.io.FilenameUtils;

import ffx.algorithms.MolecularDynamics;
import ffx.algorithms.Thermostat.Thermostats;
import ffx.potential.PotentialEnergy;
import ffx.potential.bonded.Atom;

// Open the system
open(fileName);

Atom[] atomArray = active.getAtomArray();

// Apply the soft core selection
for (int i = softStart; i <= softStop; i++) {
   Atom ai = atomArray[i - 1];
   ai.setSoftCore(true);
}

// Availble Thermostats are [ BUSSI, BERENDSEN, ISOTHERMAL ]
Thermostats thermostat = Thermostats.BUSSI;

// Create a MolecularDynamics instance
MolecularDynamics molDyn = new MolecularDynamics(active, null, thermostat);
PotentialEnergy energy = active.getPotentialEnergy();

for (int i=0; i < softWindows; i++) {
   double lambda = 1.0 - (double) i / (double) softWindows;
   energy.setSoftCoreLambda(lambda);
   String lambdaName = FilenameUtils.removeExtension(fileName);
   lambdaName += "_softCore_" + String.format("%5.3f", lambda) + ".arc";
   File lambdaFile = new File(lambdaName);
   lambdaFile.delete();
   molDyn.setArchiveFile(lambdaFile);
   molDyn.dynamic(nSteps, timeStep, printInterval, saveInterval, temperature, initVelocities);
}

