// Apache Imports
import org.apache.commons.io.FilenameUtils;

import ffx.algorithms.SimulatedAnnealing;
import ffx.xray.DiffractionData;
import ffx.xray.DiffractionFile;
import ffx.xray.RefinementEnergy;
import ffx.xray.RefinementMinimize;
import ffx.xray.RefinementMinimize.RefinementMode;

// Name of the file (PDB or XYZ).
String modelfilename = args[0];

// input MTZ/CIF/CNS data (optional - if not given, data must be present as pdbfilename.[mtz/cif/ent/cns]
String datafilename = args[1];

// data weight
double wA = 1.0;

// is this neutron data?
boolean neutron = false;

// Set the RMS gradient per atom convergence criteria (optional)
String epsString = args[2];

// number of refinement macrocycles
int ncycles = 3;

// set the maximum number of refinement cycles
int maxiter = 50000;

// type of refinement
RefinementMode refinementmode = RefinementMode.COORDINATES_AND_BFACTORS;

// simulated annealing settings:
// starting temp
double highTemperature = 1000.0;
// ending temp
double lowTemperature = 100.0;
// number of steps to take between high and low temps
int annealingSteps = 10;
// number of MD steps at each annealing step
int mdSteps = 200;

// Things below this line normally do not need to be changed.
// ===============================================================================================

if (modelfilename == null) {
   modelfilename = "examples/1n7s.P212121.xyz";
}

double eps = 1.0;
if (epsString != null) {
   eps = Double.parseDouble(epsString);
}

open(modelfilename);

DiffractionFile diffractionfile = null;
if (datafilename != null) {
  diffractionfile = new DiffractionFile(datafilename, wA, neutron);
} else {
  diffractionfile = new DiffractionFile(active, wA, neutron);
}

DiffractionData diffractiondata = new DiffractionData(active, active.getProperties(), SolventModel.POLYNOMIAL, diffractionfile);

diffractiondata.scalebulkfit();
diffractiondata.printstats();

RefinementEnergy refinementEnergy = new RefinementEnergy(active, diffractiondata, refinementmode);
SimulatedAnnealing simulatedAnnealing = new SimulatedAnnealing(active, refinementEnergy, active.getProperties(), null);
RefinementMinimize refinementMinimize = new RefinementMinimize(active, diffractiondata, refinementmode);

refinementMinimize.minimize(2.5);
diffractiondata.scalebulkfit();
diffractiondata.printstats();

int macrocycles = 3;

for (i = 0; i < macrocycles; i++) {

  simulatedAnnealing.anneal(highTemperature, lowTemperature, annealingSteps, mdSteps);

  diffractiondata.scalebulkfit();
  diffractiondata.printstats();

  refinementMinimize.minimize(eps);

  diffractiondata.scalebulkfit();
  diffractiondata.printstats();
}

diffractiondata.writedata(FilenameUtils.removeExtension(modelfilename) + "_refine.mtz");
saveAsPDB(new File(FilenameUtils.removeExtension(modelfilename) + "_refine.pdb"));
