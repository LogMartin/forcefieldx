<?xml version="1.0" encoding="UTF-8"?>
<document
    xmlns="http://maven.apache.org/XDOC/2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0
    http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>GPU Accelerated Side-Chain Optimization</title>
        <author email="mallory-tollefson@uiowa.edu">Mallory R. Tollefson</author>
    </properties>
    <body>
        <section name="GPU Accelerated Side-Chain Optimization">
            <p> Amino acid side-chain optimization algorithms that utilize discrete rotamer libraries of optimal side-chain conformations are used to find 
                the global minimum energy conformation of a protein. Under a many-body energy expansion, Force Field X can optimize side-chain conformations
                up to four-body side-chain interactions. Using this aggressive many-body expansion is computationally expensive; through the use of
                Graphical Processing Units (GPUs) and the OpenMM software package, Force Field X is capable of computing the energy of side-chain conformations
                25x faster than the first implementation of side-chain optimization.
            </p>
            <subsection name="Best Practices Overview">
                <p>The following example demonstrates global optimization of Chignolin (PDB
                    <a href="https://www.rcsb.org/structure/5AWL">5AWL</a>). The best practices protocol is as follows:
                </p>
                <ol>
                    <li>Minimize the model to eliminate obvious steric clashes.</li>
                    <li>Optimize the model using all-with-rotamer-elimination global optimization.
                        If the protein is large, use the sliding box method approximate global optimization.</li>
                    <li>Minimize the model to allow rigid rotamer conformations to establish ideal intermolecular contacts.</li>
                </ol>
            </subsection>
            <subsection name="Minimization of a Short Peptide">
                <p>To perform a minimization on the peptide, use the command below:
                    <source>ffxc Minimize 5awl.pdb</source>
                </p>
                <p>Output from the minimization will show each iteration of the algorithm and the resulting energy of the protein model. 
                    Pictured below are iterations 80-90 and the energy output. 
                    This simulation should take less than one minute of computing time on a standard laptop.
                    <source> 
                        80    -659.8378     1.6977     1.3246    0.0059    71.19     95    0.084
                        81    -660.8869     1.8005     1.0491    0.0073    74.43     96    0.083
                        82    -661.7937     1.7209     0.9069    0.0031    61.02     97    0.073
                        83    -663.0608     1.8203     1.2670    0.0059    72.98     98    0.077
                        84    -664.5783     1.6366     1.5176    0.0070    70.77     99    0.075
                        85    -665.7305     1.9301     1.1522    0.0067    72.48    100    0.082
                        86    -667.0838     1.3445     1.3533    0.0041    64.49    101    0.087
                        87    -667.9655     2.2372     0.8817    0.0074    67.58    102    0.080
                        88    -668.6703     1.2561     0.7048    0.0019    57.88    103    0.075
                        89    -669.0176     1.0315     0.3473    0.0008    49.38    104    0.077
                        90    -669.5809     0.8847     0.5634    0.0019    55.17    105    0.084

                        Optimization achieved convergence criteria:  0.88473


                        Computed Potential Energy
                        Bond Stretching          9.58748094          195        0.000 ( 0.01108)
                        Angle Bending           51.79845823          311        0.000 ( 3.24961)
                        Stretch-Bend            -0.78472634          279        0.000
                        Urey-Bradley             0.25622073           12        0.000
                        Out-of-Plane Bend        2.86561680          144        0.001
                        Torsional Angle         -8.14574875          451        0.001
                        Pi-Orbital Torsion       1.76037667           37        0.000
                        Torsion-Torsion         -6.23559113            7        0.000
                        Van der Waals          102.04698358        78641        0.017
                        Atomic Multipoles     -684.18482499        15808
                        Polarization          -138.54519229        15808        0.074
                        Total Potential       -669.58094654  (Kcal/mole)        0.095 (sec)
                        Unit Cell            -2678.32378614
                        Replicates Cell     -10713.29514458

                        Saving 5awl.pdb_2

                        Script wall clock time: 13.842 (sec)

                    </source>
                </p>
                <p>The resulting PDB file is automatically saved as 5awl.pdb_2. Run the diff command below to see changes between the original and resulting files.
                    <source>diff 5awl.pdb 5awl.pdb_2</source>
                </p>
            </subsection>
            <subsection name="Side-Chain Optimization of a Short Peptide Without a GPU">
                <p>To perform an all-with-rotamer-elimination side-chain optimization on the minimized peptide without use of a GPU, use the command below:
                    <source>ffxc ManyBody -a 2 -l 2 -x 1 5awl.pdb_2</source>
                </p>
                <p>Output from the ManyBody algorithm will show energy evaluations of self and pair side-chain energies along with a printout overall system energy. 
                    The overall energy is shown below. 
                    This simulation should take less than one minute of computing time on a standard laptop.
                    <source>
                        Final Minimum Energy

                        Computed Potential Energy
                        Bond Stretching          9.60054792          195        0.000 ( 0.01108)
                        Angle Bending           51.82217484          311        0.000 ( 3.25038)
                        Stretch-Bend            -0.78694730          279        0.000
                        Urey-Bradley             0.25532322           12        0.000
                        Out-of-Plane Bend        2.85385576          144        0.000
                        Torsional Angle         -8.13915402          451        0.000
                        Pi-Orbital Torsion       1.75393574           37        0.000
                        Torsion-Torsion         -6.23619073            7        0.000
                        Van der Waals          102.06434302        78641        0.002
                        Atomic Multipoles     -684.21212167        15805
                        Polarization          -138.53911083        15805        0.052
                        Total Potential       -669.56334405  (Kcal/mole)        0.055 (sec)
                        Unit Cell            -2678.25337619
                        Replicates Cell     -10713.01350476

                        Saving 5awl.pdb_3
                    </source>
                </p>
                <p>The resulting PDB file is automatically saved as 5awl.pdb_3. Run the diff command below to see changes between the original and resulting files.
                    <source>diff 5awl.pdb 5awl.pdb_3</source>
                </p>
            </subsection>
            <subsection name="Optimization of a Deafness Related Protein With a GPU">
                <p> This next example is based on the deafness related COCH protein. Start by installing OpenMM by following the instructions here: <a href="modules/openmm/index.html">OpenMM Installation</a>. 
                    If OpenMM is not installed, the program will run without a GPU. Next, download the coordinate file and rename it to COCH.pdb
                    (PDB <a href="https://modbase.compbio.ucsf.edu/modbase-cgi/model_details.cgi?queryfile=1527719589_2942&amp;searchmode=default&amp;displaymode=moddetail&amp;referer=yes&amp;snpflag=&amp;">COCH</a>). 
                    Perform a minimization and a GPU accelerated side-chain optimization by using the commands below:
                    <source>ffxc Minimize COCH.pdb</source>
                    <source> ffxc ManyBody -Dplatform=OMM -a 2 -l 2 -tC 1000 -x 1 -p 1 COCH.pdb_2</source>
                </p>
                <p>When using a GPU with the OpenMM platform, energy evaluations on side-chains will occur approximately 25x faster than without a GPU. 
                    This simulation should finish within one hour on a GPU. The resulting PDB file is automatically saved as COCH.pdb_3.
                </p>
                <p>A description of all of the flags used in the ManyBody command is below:
                </p>
                <table>
                    <thead>
                        <tr>
                            <th>Command</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>-a 2</td>
                            <td>Algorithm using Goldstein Elimination.</td>
                        </tr>
                        <tr>
                            <td>-l 2</td>
                            <td>Richardson rotamer library.</td>
                        </tr>
                        <tr>
                            <td>-tC 1000</td>
                            <td>Cutoff distance for two-body side-chain interactions (1000 Angstroms).</td>
                        </tr>
                        <tr>
                            <td>-x 1</td>
                            <td>Start simulation at first amino acid in protein.</td>
                        </tr>
                        <tr>
                            <td>-p 1</td>
                            <td>Prune side-chain conformations that clash with protein backbone.</td>
                        </tr>
                        <tr>
                            <td>-Dplatform=OMM</td>
                            <td>Use OpenMM to run the algorithm on a GPU.</td>
                        </tr>
                    </tbody>
                </table>
            </subsection>
        </section>
    </body>
</document>
